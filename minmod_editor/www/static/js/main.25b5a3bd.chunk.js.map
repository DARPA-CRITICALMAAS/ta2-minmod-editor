{"version":3,"sources":["reportWebVitals.ts","env.ts","models/user/UserStore.ts","models/commodity/CommodityStore.ts","models/depositType/DepositTypeStore.ts","models/country/CountryStore.ts","models/stateOrProvince/StateOrProvinceStore.ts","models/mineralSite/CandidateEntity.ts","models/mineralSite/GradeTonnage.ts","models/mineralSite/Reference.ts","models/mineralSite/MineralInventory.ts","models/mineralSite/MineralSite.ts","models/mineralSite/LocationInfo.ts","models/mineralSite/MineralSiteStore.ts","models/dedupMineralSite/DedupMineralSite.ts","models/dedupMineralSite/DedupMineralSiteStore.ts","models/Namespace.ts","models/index.ts","pages/home/SearchBar.tsx","pages/home/editDedupSite/CandidateEntity.tsx","misc/index.ts","components/EditableSelect.tsx","pages/home/editDedupSite/EditSiteField.tsx","pages/home/editDedupSite/EditDedupMineralSite.tsx","components/Entity.tsx","pages/home/DedupMineralSiteTable.tsx","pages/home/HomePage.tsx","components/Navbar.tsx","components/RequiredAuthentication.tsx","routes.tsx","pages/login/LoginPage.tsx","components/StoreInit.tsx","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","process","REACT_APP_PLATFORM","SERVER","REACT_APP_API_SERVER","PUBLIC_URL","UserStore","RStore","constructor","super","concat","id","login","username","password","resp","axios","post","runInAction","this","set","deserialize","data","isLoggedIn","records","size","get","err","getCurrentUser","values","next","value","undefined","obj","email","name","url","CommodityStore","fetchCriticalCommotities","refetch","fetch","commodity","isCritical","push","getByName","uri","substring","lastIndexOf","is_critical","normRemoteSuccessfulResponse","items","total","DepositTypeStore","SingleKeyUniqueIndex","name2id","indices","uri2id","index","getByURI","fetchAll","CountryStore","country","StateOrProvinceStore","CandidateEntity","source","confidence","observedName","normalizedURI","clone","observed_name","normalized_uri","serialize","GradeTonnage","totalTonnage","totalGrade","totalContainedMetal","total_tonnage","total_grade","total_contained_metal","Reference","document","comment","property","Document","normalizeProperty","_ref2","title","MineralInventory","category","grade","ore","reference","fromGradeTonnage","stores","createdBy","gradeTonnage","commodityStore","map","Measure","unit","MineralSite","recordId","sourceId","locationInfo","depositTypeCandidate","sameAs","dedupSiteURI","mineralInventory","getReferencedDocuments","docs","ref","getFirstReferencedDocument","updateField","edit","field","location","Error","DraftCreateMineralSite","draftID","rest","fromMineralSite","dedupMineralSite","sites","_ref3","baseSite","filter","site","updateSourceId","DedupMineralSiteLocation","stateOrProvince","toLocationInfo","depositTypes","length","getTop1DepositType","toCandidateEntity","sourceType","sourceIdent","split","URL","searchParams","toString","DraftUpdateMineralSite","arguments","isSaved","markSaved","toModel","LocationInfo","crs","state_or_province","c","s","MineralSiteStore","CRUDStore","dedupMineralSiteStore","createAndUpdateDedup","draft","discardDraft","record","create","forceFetchByURI","updateAndUpdateDedup","update","record_id","source_id","dedup_site_uri","created_by","location_info","deposit_type_candidate","same_as","Object","fromEntries","grade_tonnage","val","gt","mineral_inventory","serializeRecord","_record$locationInfo$","console","log","cat","Array","isArray","DedupMineralSiteDepositType","_stores$depositTypeSt","depositTypeStore","lat","lon","loc","_stores$countryStore$","countryStore","_stores$stateOrProvin","stateOrProvinceStore","DedupMineralSite","type","rank","getId","deposit_types","depositType","DedupMineralSiteStore","ns","SingleKeyIndex","makeObservable","action","deleteByIds","replaceSites","commodity2ids","ids","state","deindex","delete","prevIds","newIds","fetchByIds","remoteURL","params","error","response","status","fetchByCommodity","has","getByCommodity","conditions","MR","getURI","sop","updateSameAsGroup","groups","dedupSite","remove","BindedNamespace","prefix","namespace","MO","MD","userStore","mineralSiteStore","registerDefaultAxiosErrorHandler","message","window","_stores","toJS","StoreContext","createContext","useStores","React","useContext","SearchBar","searchArgs","setSearchArgs","options","setOptions","useState","useEffect","commodities","comm","label","_jsxs","Space","children","Typography","Text","_jsx","style","color","Select","width","placeholder","showSearch","optionFilterProp","onChange","CanEntComponent","entity","Link","href","target","ListCanEntComponent","entities","comp","i","_Fragment","join","arr","separator","result","EditableSelect","props","selectingValue","setSelectingValue","option","key","onClick","onProvenanceChange","Input","e","suffix","CloseCircleOutlined","Dropdown","menu","marginLeft","marginTop","DownOutlined","EditSiteField","currentSite","editField","onFinish","form","Form","useForm","useMemo","setFieldProvenance","setFieldValue","fieldValueOptions","fieldValueOptions2","initialValues","fieldValue","refDocURI","refComment","refAppliedToAll","_","uniqBy","flatMap","deptype","sort","a","b","predictedDepTypes","Set","doc","fieldValueComponent","Modal","open","onCancel","footer","getFieldsValue","parseFloat","layout","marginBottom","requiredMark","Item","required","tooltip","rules","TextArea","rows","valuePropName","Checkbox","Button","htmlType","css","table","margin","border","editButton","cursor","myEditedRow","backgroundColor","orange","EditDedupMineralSite","withStyles","observer","classes","setEditField","selectedRows","setSelectedRows","fetchedSites","isLoading","ungroupTogether","async","newGroups","from","commodityId","success","ungroupSeparately","selectedSiteIds","unselectedSiteIds","createPayload","columns","hidden","render","checked","updatedRows","add","Flex","justify","EditOutlined","className","ellipsis","maxWidth","_site$locationInfo$cr","toFixed","ReferenceComponent","find","includes","groupBtns","ungrpSepBtn","ungrpTogBtn","vertical","gap","Table","bordered","pagination","rowKey","dataSource","loading","rowClassName","change","currentUser","existingSite","cb","draftSite","Entity","store","db","emptyFetchResult","DedupMineralSiteTable","editingDedupSite","setEditingDedupSite","selectedDedupSiteIds","setSelectedDedupSiteIds","selectDedupSite","sorter","dataIndex","localeCompare","_a$location$lat","_a$location$lon","_b$location$lat","_b$location$lon","locA","locB","Divider","_a$location","_b$location","countryA","iri","countryB","province","_a$location2","_b$location2","stateA","stateB","dt","_a$gradeTonnage","_b$gradeTonnage","_a$gradeTonnage2","_b$gradeTonnage2","icon","variant","fetchData","selectOrNot","newSelectedDedupSiteIds","dedupMineralSites","newSiteGroups","dedupSiteId","siteUri","disabled","slice","expandable","expandedRowRender","showExpandColumn","expandedRowKeys","HomePage","normSearchArgs","args","setArgs","normArgs","newArgs","useSearchArgs","centerNavBar","justifyContent","boxShadow","leftNavBar","borderBottom","transition","height","borderRadius","paddingLeft","paddingRight","LeftNavBar","menus","routes","isFirstItemLogo","useLocation","keys","routeName","getMenuItem","activeRouteName","getActiveRouteName","Menu","mode","path","selectedKeys","realprops","isValidElement","children2","realprops2","RequiredAuthentication","NoArgsPathDef","component","LoginPage","setUsername","setPassword","setError","home","onSubmit","event","preventDefault","htmlFor","pathDef","exact","NoURLArgsPathDef","querySchema","_routes","applyLayout","element","createElement","direction","InitNonCriticalStores","Promise","all","resolve","ReactDOM","Provider","ConfigProvider","locale","enUSIntl","App","enUSLocale","getElementById"],"mappings":"+MAceA,MAZUC,IACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAKC,IAAkD,IAAjD,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,QAAEC,GAASL,EACpEC,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAOP,GACPQ,EAAQR,EAAY,GAExB,E,gCCTwCS,0IAAYC,mBAF/C,MAKMC,EAAoD,WAAnCF,0IAAYC,mBAAmCD,0IAAYG,qBAAkC,GAG9GC,EAAqBJ,U,aCI3B,MAAMK,UAAkBC,IAC7BC,cACEC,MAAM,GAADC,OAAIP,EAAM,WAAW,CAAEQ,GAAI,aAAc,EAChD,CAEA,WAAMC,CAAMC,EAAkBC,GAC5B,IAAIC,QAAaC,IAAMC,KAAK,GAADP,OAAIP,EAAM,iBAAiB,CAAEU,WAAUC,aAClE,OAAOI,aAAY,KACjBC,KAAKC,IAAID,KAAKE,YAAYN,EAAKO,MAAM,GAEzC,CAEA,gBAAMC,GACJ,GAAIJ,KAAKK,QAAQC,KAAO,EACtB,OAAO,EAGT,IACE,IAAIV,QAAaC,IAAMU,IAAI,GAADhB,OAAIP,EAAM,mBAIpC,OAHAe,aAAY,KACVC,KAAKC,IAAID,KAAKE,YAAYN,EAAKO,MAAM,KAEhC,CACT,CAAE,MAAOK,GACP,OAAO,CACT,CACF,CAEOC,iBACL,GAA0B,IAAtBT,KAAKK,QAAQC,KACjB,OAAON,KAAKK,QAAQK,SAASC,OAAOC,YAASC,CAC/C,CAEOX,YAAYY,GACjB,MAAO,CACLtB,GAAIsB,EAAIpB,SACRqB,MAAOD,EAAIC,MACXC,KAAMF,EAAIE,KACVC,IAAI,gCAAD1B,OAAkCuB,EAAIpB,UAE7C,EC1CK,MAAMwB,UAAuB9B,IAClCC,cACEC,MAAM,GAADC,OAAIP,EAAM,4BAAuB6B,GAAW,EACnD,CAEA,8BAAMM,IACAnB,KAAKoB,SAAiC,IAAtBpB,KAAKK,QAAQC,aACzBN,KAAKqB,MAAM,CAAC,GAGpB,MAAMhB,EAAU,GAChB,IAAK,MAAMiB,KAAatB,KAAKK,QAAQK,SACjB,OAAdY,GAAsBA,EAAUC,YAClClB,EAAQmB,KAAKF,GAGjB,OAAOjB,CACT,CAEOoB,UAAUT,GACf,GAA0B,IAAtBhB,KAAKK,QAAQC,KAAjB,CAIA,IAAK,MAAMgB,KAAatB,KAAKK,QAAQK,SACnC,GAAkB,OAAdY,GAAsBA,EAAUN,OAASA,EAC3C,OAAOM,EAGX,OAAO,IAPP,CAQF,CAEOpB,YAAYY,GACjB,MAAO,CACLtB,GAAIsB,EAAIY,IAAIC,UAAUb,EAAIY,IAAIE,YAAY,KAAO,GACjDF,IAAKZ,EAAIY,IACTV,KAAMF,EAAIE,KACVO,WAAYT,EAAIe,YAEpB,CAEUC,6BAA6BlC,GACrC,MAAO,CAAEmC,MAAOnC,EAAKO,KAAM6B,MAAOpC,EAAKoC,MACzC,EC1CK,MAAMC,UAAyB7C,IACpCC,cACEC,MAAM,GAADC,OAAIP,EAAM,8BAAyB6B,GAAW,EAAO,CAAC,IAAIqB,IAAqB,OAAQ,MAAO,IAAIA,IAAqB,MAAO,OACrI,CAEA,WAAIC,GACF,OAAOnC,KAAKoC,QAAQ,EACtB,CAEA,UAAIC,GACF,OAAOrC,KAAKoC,QAAQ,EACtB,CAEOX,UAAUT,GACf,IAAIxB,EAAKQ,KAAKmC,QAAQG,MAAM/B,IAAIS,GAChC,YAAcH,IAAPrB,OAAmBqB,EAAYb,KAAKK,QAAQE,IAAIf,EACzD,CAEO+C,SAASb,GACd,IAAIlC,EAAKQ,KAAKqC,OAAOC,MAAM/B,IAAImB,GAC/B,YAAcb,IAAPrB,OAAmBqB,EAAYb,KAAKK,QAAQE,IAAIf,EACzD,CAEA,cAAMgD,IACAxC,KAAKoB,SAAiC,IAAtBpB,KAAKK,QAAQC,aACzBN,KAAKqB,MAAM,CAAC,EAEtB,CAEOnB,YAAYY,GACjB,MAAO,IACFA,EACHtB,GAAIsB,EAAIY,IAEZ,CAEUI,6BAA6BlC,GACrC,MAAO,CAAEmC,MAAOnC,EAAKO,KAAM6B,MAAOpC,EAAKoC,MACzC,ECzCK,MAAMS,UAAqBrD,IAChCC,cACEC,MAAM,GAADC,OAAIP,EAAM,0BAAqB6B,GAAW,EACjD,CAEO0B,SAASb,GACd,MAAMgB,EAAU1C,KAAKK,QAAQE,IAAImB,GACjC,GAAgB,OAAZgB,EACJ,OAAOA,CACT,CAEA,cAAMF,IACAxC,KAAKoB,SAAiC,IAAtBpB,KAAKK,QAAQC,aACzBN,KAAKqB,MAAM,CAAC,EAEtB,CAEOnB,YAAYY,GACjB,MAAO,CACLtB,GAAIsB,EAAIY,IACRV,KAAMF,EAAIE,KAEd,CAEUc,6BAA6BlC,GACrC,MAAO,CAAEmC,MAAOnC,EAAKO,KAAM6B,MAAOpC,EAAKoC,MACzC,EC1BK,MAAMW,UAA6BvD,IACxCC,cACEC,MAAM,GAADC,OAAIP,EAAM,oCAA+B6B,GAAW,EAC3D,CAEO0B,SAASb,GACd,MAAMgB,EAAU1C,KAAKK,QAAQE,IAAImB,GACjC,GAAgB,OAAZgB,EACJ,OAAOA,CACT,CAEA,cAAMF,IACAxC,KAAKoB,SAAiC,IAAtBpB,KAAKK,QAAQC,aACzBN,KAAKqB,MAAM,CAAC,EAEtB,CAEOnB,YAAYY,GACjB,MAAO,CACLtB,GAAIsB,EAAIY,IACRV,KAAMF,EAAIE,KAEd,CAEUc,6BAA6BlC,GACrC,MAAO,CAAEmC,MAAOnC,EAAKO,KAAM6B,MAAOpC,EAAKoC,MACzC,EClCK,MAAMY,EAMJvD,YAAWb,GAA8I,IAA7I,OAAEqE,EAAM,WAAEC,EAAU,aAAEC,EAAY,cAAEC,GAAsGxE,EAAA,KAL7JqE,YAAM,OACNC,gBAAU,OACVC,kBAAY,OACZC,mBAAa,EAGXhD,KAAK6C,OAASA,EACd7C,KAAK8C,WAAaA,EAClB9C,KAAK+C,aAAeA,EACpB/C,KAAKgD,cAAgBA,CACvB,CAEOC,QACL,OAAO,IAAIL,EAAgB,CACzBC,OAAQ7C,KAAK6C,OACbC,WAAY9C,KAAK8C,WACjBC,aAAc/C,KAAK+C,aACnBC,cAAehD,KAAKgD,eAExB,CAEA,kBAAc9C,CAAYY,GACxB,OAAO,IAAI8B,EAAgB,CACzBC,OAAQ/B,EAAI+B,OACZC,WAAYhC,EAAIgC,WAChBC,aAAcjC,EAAIoC,cAClBF,cAAelC,EAAIqC,gBAEvB,CAEOC,YACL,MAAO,CACLP,OAAQ7C,KAAK6C,OACbC,WAAY9C,KAAK8C,WACjBI,cAAelD,KAAK+C,aACpBI,eAAgBnD,KAAKgD,cAEzB,ECpCK,MAAMK,EAMJhE,YAAWb,GAAqK,IAApK,UAAE8C,EAAS,aAAEgC,EAAY,WAAEC,EAAU,oBAAEC,GAA0HhF,EAAA,KALpL8C,eAAS,EAAc,KACvBgC,kBAAY,OACZC,gBAAU,OACVC,yBAAmB,EAGjBxD,KAAKsB,UAAYA,EACjBtB,KAAKsD,aAAeA,EACpBtD,KAAKuD,WAAaA,EAClBvD,KAAKwD,oBAAsBA,CAC7B,CAEOP,QACL,OAAO,IAAII,EAAa,CACtB/B,UAAWtB,KAAKsB,UAChBgC,aAActD,KAAKsD,aACnBC,WAAYvD,KAAKuD,WACjBC,oBAAqBxD,KAAKwD,qBAE9B,CAEA,kBAActD,CAAYY,GACxB,OAAO,IAAIuC,EAAa,CACtB/B,UAAWR,EAAIQ,UACfgC,aAAcxC,EAAI2C,cAClBF,WAAYzC,EAAI4C,YAChBF,oBAAqB1C,EAAI6C,uBAE7B,EC/BK,MAAMC,EAMJvE,YAAWb,GASd,IATe,SACjBqF,EAAQ,QACRC,EAAO,SACPC,GAMDvF,EAAA,KAdDqF,cAAQ,OACRC,aAAO,OACPC,cAAQ,EAaN/D,KAAK6D,SAAWA,EAChB7D,KAAK8D,QAAUA,EACf9D,KAAK+D,SAAWA,CAElB,CAEOd,QACL,OAAO,IAAIW,EAAU,CACnBC,SAAU7D,KAAK6D,SAASZ,QACxBa,QAAS9D,KAAK8D,QACdC,SAAU/D,KAAK+D,UAGnB,CAEA,kBAAc7D,CAAYY,GAKxB,OAJAA,EAAM,IACDA,EACH+C,SAAUG,EAAS9D,YAAYY,EAAI+C,WAE9B,IAAID,EAAU9C,EACvB,CAEOsC,YACL,MAAO,CACLS,SAAU7D,KAAK6D,SAAST,YACxBU,QAAS9D,KAAK8D,QACdC,SAAU/D,KAAK+D,SAGnB,CAEA,wBAAcE,CAAkBF,GAC9B,OAAQA,GACN,IAAK,OACH,MAAO,6CACT,IAAK,WACH,MAAO,2CACT,IAAK,cACH,MAAO,+CACT,IAAK,QACH,MAAO,wCACT,IAAK,UACH,MAAO,sCACT,QACE,MAAO,GAEb,EAGK,MAAMC,EAIJ3E,YAAW6E,GAAmD,IAAlD,IAAExC,EAAG,MAAEyC,GAAwCD,EAAA,KAHlExC,SAAG,OACHyC,WAAK,EAGHnE,KAAK0B,IAAMA,EACX1B,KAAKmE,MAAQA,CACf,CAEOlB,QACL,OAAO,IAAIe,EAAS,CAAEtC,IAAK1B,KAAK0B,IAAKyC,MAAOnE,KAAKmE,OACnD,CACA,kBAAcjE,CAAYY,GACxB,OAAO,IAAIkD,EAAS,CAClBtC,IAAKZ,EAAIY,IACTyC,MAAOrD,EAAIqD,OAEf,CACOf,YACL,MAAO,CACL1B,IAAK1B,KAAK0B,IACVyC,MAAOnE,KAAKmE,MAEhB,ECpFK,MAAMC,EAOJ/E,YAAWb,GAAqK,IAApK,SAAE6F,EAAQ,UAAE/C,EAAS,MAAEgD,EAAK,IAAEC,EAAG,UAAEC,GAA8HhG,EAAA,KANpL6F,cAAQ,OACR/C,eAAS,OACTgD,WAAK,OACLC,SAAG,OACHC,eAAS,EAGPxE,KAAKqE,SAAWA,EAChBrE,KAAKsB,UAAYA,EACjBtB,KAAKsE,MAAQA,EACbtE,KAAKuE,IAAMA,EACXvE,KAAKwE,UAAYA,CACnB,CAEA,uBAAcC,CAAiBC,EAAgBC,EAAmBC,EAA4BJ,GAC5F,MAAMlD,EAAYoD,EAAOG,eAAetE,IAAIqE,EAAatD,WAEzD,OAAO,IAAI8C,EAAiB,CAC1BC,SAAU,CAAC,WAAY,YAAa,YAAYS,KAC7C9D,GAAS,IAAI4B,EAAgB,CAAEC,OAAQ8B,EAAW7B,WAAY,EAAKC,aAAc/B,EAAMgC,cAAe,mCAAqChC,MAE9IM,UAAW,IAAIsB,EAAgB,CAC7BC,OAAQ8B,EACR7B,WAAY,EACZC,aAAczB,EAAUN,KACxBgC,cAAe1B,EAAUI,MAE3B4C,WAC8BzD,IAA5B+D,EAAarB,gBACT1C,EACA,IAAIkE,EAAQ,CACVnE,MAAOgE,EAAarB,WACpByB,KAAM,IAAIpC,EAAgB,CACxBC,OAAQ8B,EACR7B,WAAY,EACZC,aAAc,IACdC,cAAe,2CAGzBuB,SACgC1D,IAA9B+D,EAAatB,kBACTzC,EACA,IAAIkE,EAAQ,CACVnE,MAAOgE,EAAatB,aACpB0B,KAAM,IAAIpC,EAAgB,CACxBC,OAAQ8B,EACR7B,WAAY,EACZC,aAAc,IACdC,cAAe,2CAGzBwB,UAAWA,GAEf,CAEA,kBAActE,CAAYY,GACxB,OAAO,IAAIsD,EAAiB,CAC1BC,cAA2BxD,IAAjBC,EAAIuD,SAAyB,GAAKvD,EAAIuD,SAASS,IAAIlC,EAAgB1C,aAC7EoB,UAAWsB,EAAgB1C,YAAYY,EAAIQ,WAC3CgD,WAAqBzD,IAAdC,EAAIwD,WAAsBzD,EAAYkE,EAAQ7E,YAAYY,EAAIwD,OACrEC,SAAiB1D,IAAZC,EAAIyD,SAAoB1D,EAAYkE,EAAQ7E,YAAYY,EAAIyD,KACjEC,UAAWZ,EAAU1D,YAAYY,EAAI0D,YAEzC,EAGK,MAAMO,EAIJ1F,YAAW6E,GAA6D,IAA5D,MAAEtD,EAAK,KAAEoE,GAAgDd,EAAA,KAH5EtD,WAAK,OACLoE,UAAI,EAGFhF,KAAKY,MAAQA,EACbZ,KAAKgF,KAAOA,CACd,CAEA,kBAAc9E,CAAYY,GACxB,OAAO,IAAIiE,EAAQ,CACjBnE,MAAOE,EAAIF,MACXoE,KAAMpC,EAAgB1C,YAAYY,EAAIkE,OAE1C,EC/CK,MAAMC,EAcJ5F,YAAWb,GAAgL,IAA/K,GAAEgB,EAAE,SAAE0F,EAAQ,SAAEC,EAAQ,UAAER,EAAS,KAAE3D,EAAI,aAAEoE,EAAY,qBAAEC,EAAoB,UAAEb,EAAS,OAAEc,EAAM,aAAEV,EAAY,aAAEW,EAAY,iBAAEC,GAA8ChH,EAAA,KAb/LgB,QAAE,OACF2F,cAAQ,OACRD,cAAQ,OACRK,kBAAY,OACZZ,eAAS,OACT3D,UAAI,OACJoE,kBAAY,OACZC,0BAAoB,OACpBb,eAAS,OACTc,YAAM,OACNV,kBAAY,OACZY,sBAAgB,EAGdxF,KAAKR,GAAKA,EACVQ,KAAKkF,SAAWA,EAChBlF,KAAKmF,SAAWA,EAChBnF,KAAKuF,aAAeA,EACpBvF,KAAK2E,UAAYA,EACjB3E,KAAKgB,KAAOA,EACZhB,KAAKoF,aAAeA,EACpBpF,KAAKqF,qBAAuBA,EAC5BrF,KAAKwE,UAAYA,EACjBxE,KAAKsF,OAASA,EACdtF,KAAK4E,aAAeA,EACpB5E,KAAKwF,iBAAmBA,CAC1B,CAEA,OAAI9D,GACF,MAAM,mCAANnC,OAA0CS,KAAKR,GACjD,CAEAiG,yBACE,MAAMC,EAAoC,CAAC,EAC3C,IAAK,MAAMC,KAAO3F,KAAKwE,UACrBkB,EAAKC,EAAI9B,SAASnC,KAAOiE,EAAI9B,SAE/B,OAAO6B,CACT,CAEAE,6BACE,OAAO5F,KAAKwE,UAAU,GAAGX,QAC3B,CAEAgC,YAAYnB,EAAgBoB,EAAiBtB,GAC3C,OAAQsB,EAAKC,OACX,IAAK,OACH/F,KAAKgB,KAAO8E,EAAKlF,MACjB,MACF,IAAK,WACHZ,KAAKoF,aAAaY,SAAWF,EAAKlF,MAClC,MACF,IAAK,cACHZ,KAAKqF,qBAAuB,CAC1B,IAAIzC,EAAgB,CAClBC,OAAQ7C,KAAK2E,UAAU,GACvB7B,WAAY,EACZE,cAAe8C,EAAK9C,cACpBD,aAAc+C,EAAK/C,gBAGvB,MACF,IAAK,aACuClC,IAAtCb,KAAK4E,aAAakB,EAAKxE,WACzBtB,KAAK4E,aAAakB,EAAKxE,WAAa,IAAI+B,EAAa,CACnD/B,UAAWwE,EAAKxE,UAChBiC,WAAYuC,EAAKlF,MACjB0C,aAAc,OAGhBtD,KAAK4E,aAAakB,EAAKxE,WAAWiC,WAAauC,EAAKlF,MAGtDZ,KAAKwF,iBAAmB,CAACpB,EAAiBK,iBAAiBC,EAAQ1E,KAAK2E,UAAU,GAAI3E,KAAK4E,aAAakB,EAAKxE,WAAYkD,IACzH,MACF,IAAK,eACuC3D,IAAtCb,KAAK4E,aAAakB,EAAKxE,WACzBtB,KAAK4E,aAAakB,EAAKxE,WAAa,IAAI+B,EAAa,CACnD/B,UAAWwE,EAAKxE,UAChBgC,aAAcwC,EAAKlF,MACnB2C,WAAY,OAGdvD,KAAK4E,aAAakB,EAAKxE,WAAWgC,aAAewC,EAAKlF,MAGxDZ,KAAKwF,iBAAmB,CAACpB,EAAiBK,iBAAiBC,EAAQ1E,KAAK2E,UAAU,GAAI3E,KAAK4E,aAAakB,EAAKxE,WAAYkD,IACzH,MACF,QACE,MAAM,IAAIyB,MAAM,iBAAD1G,OAAkBuG,IAIrC9F,KAAKwE,UAAUhD,KAAKgD,EACtB,EAGK,MAAM0B,UAA+BjB,EAG1C5F,YAAW6E,GAA0E,IAAzE,QAAEiC,KAAYC,GAAwDlC,EAChF5E,MAAM8G,GAAM,KAHdD,aAAO,EAILnG,KAAKmG,QAAUA,CACjB,CAEA,sBAAcE,CACZ3B,EACA4B,EACAC,EACA7G,EACA8E,GACyB,IAADgC,EACxB,MAAMC,EAAWF,EAAM,GAAG/G,KAAO8G,EAAiBC,MAAM,GAAKA,EAAM,GAAKA,EAAMG,QAAQC,GAASA,EAAKnH,KAAO8G,EAAiBC,MAAM,KAAI,GAChI5B,EAAS,gCAAApF,OAAmCG,GAGlD,OAAO,IAAIwG,EAAuB,CAChCC,QAAQ,SAAD5G,OAAW+G,EAAiB9G,IACnCA,GAAI,GACJ2F,SAAUe,EAAuBU,eAAeH,EAAStB,SAAUzF,GACnEwF,SAAUuB,EAASvB,SACnBK,aAAce,EAAiB5E,IAC/BiD,UAAW,CAACA,GACZ3D,KAAMsF,EAAiBtF,KACvBoE,aAKI,QALQoB,EACVF,EAAiBN,UACjB,IAAIa,EAAyB,CAC3BnE,QAAS,GACToE,gBAAiB,YACjB,IAAAN,OAAA,EALUA,EAMXO,eAAerC,EAAQC,EAhBT,GAiBjBU,qBAAsBiB,EAAiBU,aAAaC,OAAS,EAAI,CAACX,EAAiBY,qBAAsBC,kBAAkBzC,IAAW,GACtIF,UAAW,CAACA,GACZc,OAAQgB,EAAiBC,MACzB3B,aAAc,CACZ,CAAC0B,EAAiB1B,aAAatD,WAAYgF,EAAiB1B,cAE9DY,iBAAkB,IAEtB,CAEA,qBAAcoB,CAAezB,EAAkBzF,GAC7C,MAAO0H,EAAYC,GAAelC,EAASmC,MAAM,KAAM,GACjDrG,EAAM,IAAIsG,IAAIF,GAEpB,OADApG,EAAIuG,aAAavH,IAAI,WAAYP,GAC3B,GAANH,OAAU6H,EAAU,MAAA7H,OAAK0B,EAAIwG,WAC/B,EAGK,MAAMC,UAA+BzC,EAAY5F,cAAA,SAAAsI,WAAA,KACtDC,SAAmB,CAAK,CAExB/B,YAAYnB,EAAgBoB,EAAiBtB,GAC3ClF,MAAMuG,YAAYnB,EAAQoB,EAAMtB,GAChCxE,KAAK4H,SAAU,CACjB,CAEAC,YACE7H,KAAK4H,SAAU,CACjB,CAEAE,UACE,OAAO,IAAI7C,EAAYjF,KACzB,ECxMK,MAAM+H,EAMJ1I,YAAWb,GAA6J,IAA5J,QAAEkE,EAAO,gBAAEoE,EAAe,SAAEd,EAAQ,IAAEgC,GAAmHxJ,EAAA,KAL5KwH,cAAQ,OACRtD,aAAO,OACPoE,qBAAe,OACfkB,SAAG,EAGDhI,KAAKgG,SAAWA,EAChBhG,KAAK0C,QAAUA,EACf1C,KAAK8G,gBAAkBA,EACvB9G,KAAKgI,IAAMA,CACb,CAEA,kBAAc9H,CAAYY,GACxB,OAAO,IAAIiH,EAAa,CACtB/B,SAAUlF,EAAIkF,SACdtD,aAAyB7B,IAAhBC,EAAI4B,QAAwB,GAAK5B,EAAI4B,QAAQoC,IAAIlC,EAAgB1C,aAC1E4G,qBAA2CjG,IAA1BC,EAAImH,kBAAkC,GAAKnH,EAAImH,kBAAkBnD,IAAIlC,EAAgB1C,aACtG8H,SAAiBnH,IAAZC,EAAIkH,SAAoBnH,EAAY+B,EAAgB1C,YAAYY,EAAIkH,MAE7E,CAEO/E,QACL,OAAO,IAAI8E,EAAa,CACtB/B,SAAUhG,KAAKgG,SACftD,QAAS1C,KAAK0C,QAAQoC,KAAKoD,GAAMA,EAAEjF,UACnC6D,gBAAiB9G,KAAK8G,gBAAgBhC,KAAKqD,GAAMA,EAAElF,UACnD+E,IAAKhI,KAAKgI,IAAMhI,KAAKgI,IAAI/E,aAAUpC,GAEvC,ECtBK,MAAMuH,UAAyBC,IAGpChJ,YAAYiJ,GACVhJ,MAAM,GAADC,OAAIP,EAAM,8BAAyB6B,GAAW,GAAO,KAH5DyH,2BAAqB,EAInBtI,KAAKsI,sBAAwBA,CAC/B,CAEA,0BAAMC,CAAqBjH,EAAmBkH,GAAoF,IAArDC,IAAqBd,UAAAV,OAAA,QAAApG,IAAA8G,UAAA,KAAAA,UAAA,GAChG,MAAMe,QAAe1I,KAAK2I,OAAOH,EAAOC,GAExC,aADMzI,KAAKsI,sBAAsBM,gBAAgBF,EAAOnD,aAAcjE,GAC/DoH,CACT,CAEA,0BAAMG,CAAqBvH,EAAmBkH,GAAoF,IAArDC,IAAqBd,UAAAV,OAAA,QAAApG,IAAA8G,UAAA,KAAAA,UAAA,GAChG,MAAMe,QAAe1I,KAAK8I,OAAON,EAAOC,GAExC,aADMzI,KAAKsI,sBAAsBM,gBAAgBF,EAAOnD,aAAcjE,GAC/DoH,CACT,CAEOxI,YAAYwI,GACjB,OAAO,IAAIzD,EAAY,CACrBzF,GAAIkJ,EAAOlJ,GACX0F,SAAUwD,EAAOK,UACjB5D,SAAUuD,EAAOM,UACjBzD,aAAcmD,EAAOO,eACrBtE,UAAW+D,EAAOQ,WAClBlI,KAAM0H,EAAO1H,KACboE,kBAC2BvE,IAAzB6H,EAAOS,cACHpB,EAAa7H,YAAYwI,EAAOS,eAChC,IAAIpB,EAAa,CACfrF,QAAS,GACToE,gBAAiB,KAEzBzB,sBAAuBqD,EAAOU,wBAA0B,IAAItE,IAAIlC,EAAgB1C,aAChFsE,UAAWkE,EAAOlE,UAAUM,IAAIlB,EAAU1D,aAC1CoF,OAAQoD,EAAOW,QACfzE,aAAc0E,OAAOC,YACnBb,EAAOc,cAAc1E,KAAK2E,IACxB,MAAMC,EAAKrG,EAAanD,YAAYuJ,GACpC,MAAO,CAACC,EAAGpI,UAAWoI,EAAG,KAG7BlE,iBAAkBkD,EAAOiB,kBAAkB7E,IAAIV,EAAiBlE,cAEpE,CAEO0J,gBAAgBlB,GAAkE,IAADmB,EAGtF,MAAMrF,EAAYkE,EAAOlE,UAAUM,KAAKa,GAAQA,EAAIvC,cACpD,IAAIoC,EAAmB,GAEvB,IAAK,MAAMkE,KAAMJ,OAAO5I,OAAOgI,EAAO9D,cACpCkF,QAAQC,IAAI,MAAOL,GACnBlE,EAAiBhE,KAAK,CAGpB6C,SAAU,CAAC,WAAY,YAAa,YAAYS,KAAKkF,IAAG,CACtDnH,OAAQ6F,EAAO/D,UAAU,GACzB7B,WAAY,EACZK,eAAe,mCAAD5D,OAAqCyK,OAErD1I,UAAW,CACTuB,OAAQ6F,EAAO/D,UAAU,GACzB7B,WAAY,EACZK,eAAe,mCAAD5D,OAAqCmK,EAAGpI,YAExDiD,IAAK,CACH3D,MAAO8I,EAAGpG,aACV0B,KAAM,CACJnC,OAAQ6F,EAAO/D,UAAU,GACzB7B,WAAY,EACZK,eAAgB,yCAGpBmB,MAAO,CACL1D,MAAO8I,EAAGnG,WACVyB,KAAM,CACJnC,OAAQ6F,EAAO/D,UAAU,GACzB7B,WAAY,EACZK,eAAgB,yCAGpBqB,UAAWA,EAAU,KAIzB,MAAO,CACLxD,KAAM0H,EAAO1H,KACb+H,UAAWL,EAAOxD,SAClB8D,UAAWN,EAAOvD,SAClB+D,WAAYR,EAAO/D,UACnBsE,eAAgBP,EAAOnD,aACvB4D,cAAe,CACbzG,QAASgG,EAAOtD,aAAa1C,QAAQoC,KAAKpC,GAAYA,EAAQU,cAC9D6E,kBAAmBS,EAAOtD,aAAa0B,gBAAgBhC,KAAKmD,GAAsBA,EAAkB7E,cACpG4E,IAA4B,QAAzB6B,EAAEnB,EAAOtD,aAAa4C,WAAG,IAAA6B,OAAA,EAAvBA,EAAyBzG,YAC9B4C,SAAU0C,EAAOtD,aAAaY,UAEhCoD,uBAAwBV,EAAOrD,qBAAqBP,KAAKO,GAAyBA,EAAqBjC,cACvGuG,kBAAmBnE,EACnBhB,UAAWA,EACX6E,QAASX,EAAOpD,OAEpB,CAEUxD,6BAA6BlC,GACrC,MAAO,CAAEmC,MAAOkI,MAAMC,QAAQtK,EAAKO,MAAQP,EAAKO,KAAOmJ,OAAO5I,OAAOd,EAAKO,MAAO6B,MAAOpC,EAAKoC,MAC/F,EClHK,MAAMmI,EAKJ9K,YAAWb,GAAiF,IAAhF,IAAEkD,EAAG,OAAEmB,EAAM,WAAEC,GAA8DtE,EAAA,KAJhGkD,SAAG,OACHmB,YAAM,OACNC,gBAAU,EAGR9C,KAAK0B,IAAMA,EACX1B,KAAK6C,OAASA,EACd7C,KAAK8C,WAAaA,CACpB,CAEOqE,kBAAkBzC,GAAkE,IAAD0F,EACxF,OAAO,IAAIxH,EAAgB,CACzBC,OAAQ7C,KAAK6C,OACbC,WAAY9C,KAAK8C,WACjBE,cAAehD,KAAK0B,IACpBqB,aAAmD,QAAvCqH,EAAE1F,EAAO2F,iBAAiB9J,IAAIP,KAAK0B,YAAI,IAAA0I,OAAA,EAArCA,EAAuCpJ,MAEzD,EAGK,MAAM6F,EAMJxH,YAAW6E,GAAkH,IAAjH,IAAEoG,EAAG,IAAEC,EAAG,QAAE7H,EAAO,gBAAEoE,GAAyF5C,EAAA,KALjIoG,SAAG,OACHC,SAAG,OACH7H,aAAO,OACPoE,qBAAe,EAGb9G,KAAKsK,IAAMA,EACXtK,KAAKuK,IAAMA,EACXvK,KAAK0C,QAAUA,EACf1C,KAAK8G,gBAAkBA,CACzB,CAEA,kBAAc5G,CAAYwI,GACxB,OAAO,IAAI7B,EAAyB,CAClCyD,IAAK5B,EAAO4B,IACZC,IAAK7B,EAAO6B,IACZ7H,QAASgG,EAAOhG,SAAW,GAC3BoE,gBAAiB4B,EAAOT,mBAAqB,IAEjD,CAEOlB,eACLrC,EAIA7B,GAEC,IACG2H,EAFJ1H,EAAkB6E,UAAAV,OAAA,QAAApG,IAAA8G,UAAA,GAAAA,UAAA,GAAG,EAOrB,YAJiB9G,IAAbb,KAAKsK,UAAkCzJ,IAAbb,KAAKuK,MACjCC,EAAG,UAAAjL,OAAaS,KAAKuK,IAAG,KAAAhL,OAAIS,KAAKsK,IAAG,MAG/B,IAAIvC,EAAa,CACtB/B,SAAUwE,EACVxC,IAAK,IAAIpF,EAAgB,CACvBC,SACAC,aACAE,cAAe,uCACfD,aAAc,cAEhBL,QAAS1C,KAAK0C,QAAQoC,KAAKpC,IAAa,IAAD+H,EACrC,OAAO,IAAI7H,EAAgB,CACzBC,SACAC,aACAE,cAAeN,EACfK,aAA8C,QAAlC0H,EAAE/F,EAAOgG,aAAanK,IAAImC,UAAQ,IAAA+H,OAAA,EAAhCA,EAAkCzJ,MAChD,IAEJ8F,gBAAiB9G,KAAK8G,gBAAgBhC,KAAKgC,IAAqB,IAAD6D,EAC7D,OAAO,IAAI/H,EAAgB,CACzBC,SACAC,aACAE,cAAe8D,EACf/D,aAA8D,QAAlD4H,EAAEjG,EAAOkG,qBAAqBrK,IAAIuG,UAAgB,IAAA6D,OAAA,EAAhDA,EAAkD3J,MAChE,KAGR,EAGK,MAAM6J,EAWJxL,YAAWmH,GAoBd,IApBe,GACjBhH,EAAE,IACFkC,EAAG,KACHV,EAAI,KACJ8J,EAAI,KACJC,EAAI,MACJxE,EAAK,aACLS,EAAY,SACZhB,EAAQ,aACRpB,GAWD4B,EAAA,KA9BDhH,QAAE,OACFkC,SAAG,OACHV,UAAI,OACJ8J,UAAI,OACJC,UAAI,OACJxE,WAAK,OACLS,kBAAY,OACZhB,cAAQ,OACRpB,kBAAY,EAuBV5E,KAAKR,GAAKA,EACVQ,KAAK0B,IAAMA,EACX1B,KAAKgB,KAAOA,EACZhB,KAAK8K,KAAOA,EACZ9K,KAAK+K,KAAOA,EACZ/K,KAAKuG,MAAQA,EACbvG,KAAKgH,aAAeA,EACpBhH,KAAKgG,SAAWA,EAChBhG,KAAK4E,aAAeA,CACtB,CAEA,aAAItD,GACF,OAAOtB,KAAK4E,aAAatD,SAC3B,CAEA,YAAc0J,CAAMtJ,GAClB,OAAOA,EAAIC,UAAUD,EAAIE,YAAY,KAAO,EAC9C,CAEA,kBAAc1B,CAAYwI,GACxB,OAAO,IAAImC,EAAiB,CAC1BrL,GAAIkJ,EAAOlJ,GACXkC,IAAI,mCAADnC,OAAqCmJ,EAAOlJ,IAC/CwB,KAAM0H,EAAO1H,KACb8J,KAAMpC,EAAOoC,KACbC,KAAMrC,EAAOqC,KACbxE,MAAOmC,EAAOnC,MACdS,aAAc0B,EAAOuC,cAAcnG,KAAKoG,GAAqB,IAAIf,EAA4Be,KAC7FlF,cAA8BnF,IAApB6H,EAAO1C,SAAyBa,EAAyB3G,YAAYwI,EAAO1C,eAAYnF,EAClG+D,aAAcvB,EAAanD,YAAYwI,EAAOc,gBAElD,CAEOtC,qBACL,OAAOlH,KAAKgH,aAAa,EAC3B,ECnJK,MAAMmE,UAA8B/L,IAGzCC,YAAY+L,GACV9L,MAAM,GAADC,OAAIP,EAAM,oCAA+B6B,GAAW,EAAO,CAAC,IAAIwK,IAAe,YAAa,QAAQ,KAH3GD,QAAE,EAIApL,KAAKoL,GAAKA,EAEVE,YAAetL,KAAM,CACnB4I,gBAAiB2C,IACjBC,YAAaD,IACbE,aAAcF,KAElB,CAEA,iBAAIG,GACF,OAAO1L,KAAKoC,QAAQ,EACtB,CAMAoJ,YAAYG,GACV3L,KAAK4L,MAAMhL,MAAQ,WACnB,IAAK,MAAMpB,KAAMmM,EAAK,CACpB,MAAMjD,EAAS1I,KAAKK,QAAQE,IAAIf,QACjBqB,IAAX6H,GAAmC,OAAXA,IAC1B1I,KAAK6L,QAAQnD,GACb1I,KAAKK,QAAQyL,OAAOtM,GAExB,CACAQ,KAAK4L,MAAMhL,MAAQ,SACrB,CAQA,kBAAM6K,CAAaM,EAAuBC,EAAsB1K,GAC9DtB,KAAKwL,YAAYO,SACX/L,KAAKiM,WAAWD,GAAQ,EAAM,CAAE1K,aACxC,CAEA,qBAAMsH,CAAgBlH,EAAaJ,GACjC,MAAM9B,EAAKqL,EAAiBG,MAAMtJ,GAClC,IACE1B,KAAK4L,MAAMhL,MAAQ,WAEnB,IAAIhB,QAAaC,IAAMU,IAAI,GAADhB,OAAIS,KAAKkM,UAAS,KAAA3M,OAAIC,GAAM,CACpD2M,OAAQ,CAAE7K,eAGZ,OAAOvB,aAAY,KACjB,IAAI2I,EAAS1I,KAAKE,YAAYN,EAAKO,MAKnC,OAJAH,KAAKK,QAAQJ,IAAIyI,EAAOlJ,GAAIkJ,GAC5B1I,KAAKsC,MAAMoG,GACX1I,KAAK4L,MAAMhL,MAAQ,UAEZZ,KAAKK,QAAQE,IAAImI,EAAOlJ,GAAG,GAEtC,CAAE,MAAO4M,GACP,GAAIA,EAAMC,UAAsC,MAA1BD,EAAMC,SAASC,OAMnC,YAJAvM,aAAY,KACVC,KAAKK,QAAQJ,IAAIT,EAAI,MACrBQ,KAAK4L,MAAMhL,MAAQ,SAAS,IAQhC,MAHAb,aAAY,KACVC,KAAK4L,MAAMhL,MAAQ,OAAO,IAEtBwL,CACR,CACF,CAEA,sBAAMG,CAAiBjL,GACrB,OAAKtB,KAAKoB,SAAWpB,KAAK0L,cAAcpJ,MAAMkK,IAAIlL,EAAU9B,IACnDQ,KAAKyM,eAAenL,SAEhBtB,KAAKqB,MAAM,CACtBqL,WAAY,CAAEpL,UAAWA,EAAU9B,KAEvC,CAEOiN,eAAenL,GACpB,IAAKtB,KAAK0L,cAAcpJ,MAAMkK,IAAIlL,EAAU9B,IAC1C,MAAO,CAAEa,QAAS,GAAI2B,MAAO,GAG/B,MAAM3B,EAAU,GAChB,IAAK,MAAMb,KAAMQ,KAAK0L,cAAcpJ,MAAM/B,IAAIe,EAAU9B,IACtDa,EAAQmB,KAAKxB,KAAKK,QAAQE,IAAIf,IAEhC,MAAO,CAAEa,UAAS2B,MAAO3B,EAAQ4G,OACnC,CAEO/G,YAAYwI,GACjB,MAAMiE,EAAK3M,KAAKoL,GAAGuB,GAEnB,OAAO,IAAI9B,EAAiB,CAC1BrL,GAAIkJ,EAAOlJ,GACXkC,IAAKiL,EAAGC,OAAOlE,EAAOlJ,IACtBwB,KAAM0H,EAAO1H,KACb8J,KAAMpC,EAAOoC,KACbC,KAAMrC,EAAOqC,KACbxE,MAAOmC,EAAOnC,MACdS,aAAc0B,EAAOuC,cAAcnG,KAChCoG,GACC,IAAIf,EAA4B,CAC9BzI,IAAKiL,EAAGC,OAAO1B,EAAY1L,IAC3BqD,OAAQqI,EAAYrI,OACpBC,WAAYoI,EAAYpI,eAG9BkD,cACsBnF,IAApB6H,EAAO1C,SACH,IAAIa,EAAyB,CAC3ByD,IAAK5B,EAAO1C,SAASsE,IACrBC,IAAK7B,EAAO1C,SAASuE,IACrB7H,SAAUgG,EAAO1C,SAAStD,SAAW,IAAIoC,KAAKpC,GAAoBiK,EAAGC,OAAOlK,KAC5EoE,iBAAkB4B,EAAO1C,SAASiC,mBAAqB,IAAInD,KAAK+H,GAAgBF,EAAGC,OAAOC,YAE5FhM,EACN+D,aAAcvB,EAAanD,YAAYwI,EAAOc,gBAElD,CAEA,uBAAMsD,CAAkBC,GAEtB,aADmBlN,IAAMC,KAAK,kBAAmBiN,IACrC5M,KAAK2E,KAAKkI,GAAmBA,EAAUxN,IACrD,CAEUsC,6BAA6BlC,GACrC,MAAO,CAAEmC,MAAOkI,MAAMC,QAAQtK,EAAKO,MAAQP,EAAKO,KAAOmJ,OAAO5I,OAAOd,EAAKO,MAAO6B,MAAOpC,EAAKoC,MAC/F,CAKU6J,QAAQnD,GAChB,IAAK,MAAMpG,KAAStC,KAAKoC,QACvBE,EAAM2K,OAAOvE,EAEjB,EC3JK,MAAMwE,EAIX7N,YAAY8N,EAAgBC,GAAoB,KAHhDD,YAAM,OACNC,eAAS,EAGPpN,KAAKmN,OAASA,EACdnN,KAAKoN,UAAYA,CACnB,CAEAR,OAAOpN,GACL,MAAM,GAAND,OAAUS,KAAKoN,WAAS7N,OAAGC,EAC7B,ECCF,MACM8I,EAAwB,IAAI6C,EADT,IDElB,MAAuB9L,cAAA,KAC5BsN,GAAsB,IAAIO,EAAgB,KAAM,oCAAoC,KACpFG,GAAsB,IAAIH,EAAgB,KAAM,oCAAoC,KACpFI,GAAsB,IAAIJ,EAAgB,KAAM,2CAA4C,ICFjFxI,EAAS,CACpB6I,UAAW,IAAIpO,EACf0F,eAAgB,IAAI3D,EACpBoH,sBAAqB,EACrBkF,iBAAkB,IAAIpF,EAAiBE,GACvC+B,iBAAkB,IAAIpI,EACtB2I,qBAAsB,IAAIjI,EAC1B+H,aAAc,IAAIjI,GAGpBgL,aAAkCrB,IAChCsB,IAAQtB,MAAM,uCAAwC,EAAE,IAGzDuB,OAAeC,QAAUlJ,EACzBiJ,OAAeE,KAAOA,IAYhB,MAAMC,EAAeC,wBAAsBrJ,GAE3C,SAASsJ,IACd,OAAOC,IAAMC,WAAWJ,EAC1B,C,oFCyDO,MAAMK,EAAsC3P,IAAoC,IAAnC,WAAE4P,EAAU,cAAEC,GAAe7P,EAC/E,MAAM,eAAEqG,GAAmBmJ,KACpBM,EAASC,GAAcC,mBAA6C,IAE3EC,qBAAU,KACR5J,EAAe1D,2BAA2B5C,MAAMmQ,IAC9CH,EACEG,EAAY5J,KAAK6J,IAAI,CACnB/N,MAAO+N,EAAKnP,GACZoP,MAAOD,EAAK3N,SAEf,GACD,GACD,CAAC6D,IAMJ,OACEgK,eAACC,IAAK,CAAAC,SAAA,CACJF,eAACG,IAAWC,KAAI,CAAAF,SAAA,CAAC,YACNG,cAAA,QAAMC,MAAO,CAAEC,MAAO,OAAQL,SAAC,MAAQ,OAElDG,cAACG,IAAM,CAACF,MAAO,CAAEG,MAAO,KAAO1O,MAAOwN,EAAW9M,UAAWiO,YAAY,qBAAqBC,YAAY,EAAMC,iBAAiB,QAAQC,SAT1H9O,IAChByN,EAAc,CAAE/M,UAAWuD,EAAetE,IAAIK,GAAQI,MAAO,EAQiGsN,QAASA,MAC/J,E,0DCvHL,MAAMqB,GAA6CnR,IAAkC,IAAjC,OAAEoR,GAAyBpR,EACpF,QAAeqC,IAAX+O,EACF,OAAOV,cAAA,QAAAH,SAAM,MAGf,MAAM/N,OAA+BH,IAAxB+O,EAAO7M,aAA6B,IAAM6M,EAAO7M,aAC9D,YAA6BlC,IAAzB+O,EAAO5M,cAEPkM,cAACF,IAAWa,KAAI,CAACC,KAAMF,EAAO5M,cAAe+M,OAAO,SAAQhB,SACzD/N,IAKAkO,cAAA,QAAAH,SAAO/N,GAAY,EAGfgP,GAAsB9L,IAAoC,IAAnC,SAAE+L,GAA2B/L,EAC/D,MAAMgM,EAAO,GAETD,EAAShJ,OAAS,GACpBiJ,EAAK1O,KAAK0N,cAACS,GAAe,CAASC,OAAQK,EAAS,IAApB,IAGlC,IAAK,IAAIE,EAAI,EAAGA,EAAIF,EAAShJ,OAAQkJ,IACnCD,EAAK1O,KAAK0N,cAAA,QAAAH,SAAM,eAChBmB,EAAK1O,KAAK0N,cAACS,GAAe,CAASC,OAAQK,EAASE,IAApBA,IAGlC,OAAOjB,cAAAkB,WAAA,CAAArB,SAAGmB,GAAQ,ECxCb,SAASG,GAAQC,EAAUC,GAChC,GAAmB,IAAfD,EAAIrJ,OACN,MAAO,GAGT,MAAMuJ,EAAc,CAACF,EAAI,IACzB,IAAK,IAAIH,EAAI,EAAGA,EAAIG,EAAIrJ,OAAQkJ,IAC9BK,EAAOhP,KAAK+O,EAAUJ,IACtBK,EAAOhP,KAAK8O,EAAIH,IAElB,OAAOK,CACT,C,gECiBO,MAAMC,GAAiDC,IAC5D,MAAOC,EAAgBC,GAAqBpC,oBAAS,GAC/CzM,EAA4B2O,EAAMpC,QAAQxJ,KAAK+L,IAAM,CACzDC,IAAKD,EAAOC,IACZlC,MAAOiC,EAAOjC,MACdmC,QAASA,KACPH,GAAkB,QACK/P,IAAnB6P,EAAMhB,UAAwBgB,EAAMhB,SAASmB,EAAOjC,OACxD8B,EAAMM,mBAAmBH,EAAOC,IAAI,MAcxC,OAXA/O,EAAMP,KAAK,CAAEsJ,KAAM,YACnB/I,EAAMP,KAAK,CACTsP,IAAK,MACLlC,MAAO,iBACPmC,QAASA,KACPH,GAAkB,GAClBF,EAAMM,wBAAmBnQ,QACFA,IAAnB6P,EAAMhB,UAAwBgB,EAAMhB,SAAS,GAAG,IAIpDiB,EAEAzB,cAAC+B,KAAK,CACJrQ,MAAO8P,EAAM9P,MACb8O,SAAWwB,QAA0BrQ,IAAnB6P,EAAMhB,SAAyBgB,EAAMhB,SAASwB,EAAEnB,OAAOnP,YAASC,EAClF0O,YAAa,iBACb4B,OACEjC,cAACkC,KAAmB,CAClBjC,MAAO,CAAEC,MAAO,mBAChB2B,QAASA,KACPH,GAAkB,QACK/P,IAAnB6P,EAAMhB,UAAwBgB,EAAMhB,SAAS,GAAG,MAW9DR,cAACmC,KAAQ,CAACC,KAAM,CAAEvP,QAAOoN,MAAO,CAAEoC,YAAa,GAAIC,UAAW,IAAMzC,SAClEG,cAAC+B,KAAK,CAACrQ,MAAO8P,EAAM9P,MAAO2O,YAAa,qCAAsC4B,OAAQjC,cAACuC,KAAY,CAACtC,MAAO,CAAEC,MAAO,wBAC3G,ECrDFsC,GAA8ClT,IAA6D,IAA5D,YAAEmT,EAAW,MAAEpL,EAAK,UAAEqL,EAAS,UAAEtQ,EAAS,SAAEuQ,GAAUrT,EAChH,MAAM,iBAAE6L,GAAqB2D,KACtB8D,GAAQC,KAAKC,UAEd7N,EAAQ8N,mBAAQ,KACpB,OAAQL,GACN,IAAK,OACH,MAAO,OACT,IAAK,WACH,MAAO,WACT,IAAK,cACH,MAAO,eACT,IAAK,QACH,MAAO,YACT,IAAK,UACH,MAAO,eACT,QACE,MAAO,GACX,GACC,CAACA,IAEEM,EAAsBpB,IAC1B,QAAYjQ,IAARiQ,EAAmB,CACrB,MAAMnK,EAAOJ,EAAMG,QAAQC,GAASA,EAAKnH,KAAOsR,IAAK,GAGrDgB,EAAKK,cAAc,YAAaxL,EAAKf,6BAA6BlE,IACpE,MACEoQ,EAAKK,cAAc,YAAa,GAClC,EAGF,IAAIC,EAA4C,GAC5CC,EAAyD,GACzDC,EAAgB,CAClBC,WAAY,GACZC,UAAW,GACXC,WAAY,GACZC,iBAAiB,GAGnB,GAAkB,SAAdd,EACFQ,EAAoB7L,EAAMzB,KAAK6B,IAAI,CAAQmK,IAAKnK,EAAKnH,GAAIoP,MAAOjI,EAAK3F,cACjDH,IAAhB8Q,IACFW,EAAcC,WAAaZ,EAAY3Q,KACvCsR,EAAcE,UAAYb,EAAY/L,6BAA6BlE,IACnE4Q,EAAcG,WAAad,EAAYnN,UAAU,GAAGV,cAEjD,GAAkB,aAAd8N,EACTQ,EAAoB7L,EAAMG,QAAQC,QAAwC9F,IAA/B8F,EAAKvB,aAAaY,WAAwBlB,KAAK6B,IAAI,CAAQmK,IAAKnK,EAAKnH,GAAIoP,MAAOjI,EAAKvB,aAAaY,kBACzHnF,IAAhB8Q,IACFW,EAAcC,WAAaZ,EAAYvM,aAAaY,UAAY,GAChEsM,EAAcE,UAAYb,EAAY/L,6BAA6BlE,IACnE4Q,EAAcG,WAAad,EAAYnN,UAAU,GAAGV,cAEjD,GAAkB,gBAAd8N,EAA6B,CACtCS,EAAqBM,IAAEC,OACrBrM,EAAMsM,SAASlM,GAASA,EAAKtB,uBAAsBqB,QAAQoM,QAAsCjS,IAA1BiS,EAAQ9P,gBAC/E,iBAEC+P,MAAK,CAACC,EAAGC,IAAMD,EAAElQ,WAAamQ,EAAEnQ,aAChCgC,KAAKgG,IAAI,CAAQlK,MAAOkK,EAAK9H,cAAgB4L,MAAOvE,EAAiB9H,SAASuI,EAAK9H,eAAiBhC,SAEvG,MAAMkS,EAAoB,IAAIC,IAAId,EAAmBvN,KAAKgG,GAASA,EAAKlK,SACxEyR,EAAqBA,EAAmB9S,OAAO8K,EAAiB3D,QAAQoE,IAAUoI,EAAkB1G,IAAI1B,EAAKpJ,OAAMoD,KAAKgG,IAAI,CAAQlK,MAAOkK,EAAKpJ,IAAKkN,MAAO9D,EAAK9J,eAE7IH,IAAhB8Q,GAA6BA,EAAYtM,qBAAqB4B,OAAS,IACzEqL,EAAcC,WAAaZ,EAAYtM,qBAAqB,GAAGrC,cAC/DsP,EAAcE,UAAYb,EAAY/L,6BAA6BlE,IACnE4Q,EAAcG,WAAad,EAAYnN,UAAU,GAAGV,QAExD,CAEA,MAAM4B,EAAOiN,IAAEC,OACbrM,EAAMsM,SAASlM,GAAS2C,OAAO5I,OAAOiG,EAAKlB,0BAA0BX,KAAKsO,IAAG,CAAQtC,IAAKsC,EAAI1R,IAAKkN,MAAOwE,EAAIjP,OAASiP,EAAI1R,UAC3H,OA2BF,IAAI2R,EASJ,OAPEA,EADgB,UAAdzB,GAAuC,YAAdA,EACL1C,cAAC+B,KAAK,CAACnG,KAAK,WACX,gBAAd8G,EACa1C,cAACG,IAAM,CAACG,YAAY,EAAMlB,QAAS+D,EAAoB5C,iBAAiB,UAExEP,cAACuB,GAAc,CAACO,mBAAoBkB,EAAoB5D,QAAS8D,IAIvFlD,cAACoE,KAAK,CAACnP,MAAM,oBAAoBmL,MAAM,MAAMiE,UAAoB1S,IAAd+Q,EAAyB4B,SAAUA,IAAM3B,IAAY4B,OAAQ,KAAK1E,SACnHF,eAACkD,KAAI,CAACD,KAAMA,EAAMD,SAnCNnR,IACd,QAAkBG,IAAd+Q,EAAyB,OAC7B,MAAMnI,EAAMqI,EAAK4B,iBACjB,IAAI5N,EACJ,GAAkB,SAAd8L,GAAsC,aAAdA,EAC1B9L,EAAO,CAAEC,MAAO6L,EAAWhR,MAAO6I,EAAI8I,iBACjC,GAAkB,gBAAdX,EACT9L,EAAO,CAAEC,MAAO6L,EAAW7O,aAAcsH,EAAiB9H,SAASkH,EAAI8I,YAAavR,KAAMgC,cAAeyG,EAAI8I,gBACxG,IAAkB,UAAdX,GAAuC,YAAdA,EAGlC,MAAM,IAAI3L,MAAM,iBAAD1G,OAAkBqS,IAFjC9L,EAAO,CAAEC,MAAO6L,EAAWhR,MAAO+S,WAAWlK,EAAI8I,YAAajR,YAGhE,CAEAuQ,EAAS,CACP/L,OACAtB,UAAW,IAAIZ,EAAU,CACvBC,SAAU,IAAIG,EAAS,CAAEtC,IAAK+H,EAAI+I,YAClC1O,QAAS2F,EAAIgJ,WACb1O,SAAU0F,EAAIiJ,qBAAkB7R,EAAY+C,EAAUK,kBAAkB2N,MAE1E,EAcoCgC,OAAO,WAAWzE,MAAO,CAAEqC,UAAW,GAAIqC,aAAc,IAAMC,cAAc,EAAMxB,cAAeA,EAAcvD,SAAA,CACjJG,cAAC6C,KAAKgC,KAAI,CAAa/S,KAAK,aAAa4N,MAAOzK,EAAO6P,UAAU,EAAMC,QAAQ,2BAA2BC,MAAO,CAAC,CAAEF,UAAU,EAAMtG,QAAS,0BAA2BqB,SACrKsE,IAEHnE,cAAC6C,KAAKgC,KAAI,CAAa/S,KAAK,YAAY4N,MAAM,YAAYoF,UAAU,EAAMC,QAAQ,2BAA2BC,MAAO,CAAC,CAAEF,UAAU,EAAMtG,QAAS,iBAAkBqB,SAChKG,cAACuB,GAAc,CAACO,mBAAoBA,OAAU1C,QAAS5I,MAEzDwJ,cAAC6C,KAAKgC,KAAI,CAAa/S,KAAK,aAAa4N,MAAM,UAASG,SACtDG,cAAC+B,KAAMkD,SAAQ,CAACC,KAAM,MAExBlF,cAAC6C,KAAKgC,KAAI,CAAa/S,KAAK,kBAAkBqT,cAAc,UAAStF,SACnEG,cAACoF,IAAQ,CAAAvF,SAAC,2CAEZG,cAAC6C,KAAKgC,KAAI,CAAAhF,SACRF,eAACC,IAAK,CAAAC,SAAA,CACJG,cAACqF,IAAM,CAACzJ,KAAK,UAAU0J,SAAS,SAAQzF,SAAC,SAGzCG,cAACqF,IAAM,CAACC,SAAS,SAASzD,QAASA,IAAMc,IAAW9C,SAAC,oBAMrD,E,aClJZ,MAAM0F,GAAM,CACVC,MAAO,CACL,eAAgB,CACdC,OAAQ,iBACRC,OAAQ,mBAGZC,WAAY,CACVC,OAAQ,WAEVC,YAAa,CACXC,gBAAgB,GAADzV,OAAK0V,KAAO,GAAE,eAC7B,SAAU,CACRD,gBAAgB,GAADzV,OAAK0V,KAAO,GAAE,kBAUtBC,GAAuBC,aAAWV,GAAXU,CAClCC,aAAS5W,IAA4F,IAA3F,UAAEwO,EAAS,UAAE1L,EAAS,QAAE+T,GAA6D7W,EAC7F,MAAMkG,EAASsJ,KACT,iBAAER,EAAgB,UAAED,EAAS,sBAAEjF,GAA0B5D,GACxDkN,EAAW0D,GAAgB9G,wBAAoC3N,IAC/D0U,EAAcC,GAAmBhH,mBAAsB,IAAI2E,KAI5DsC,EAF6CzI,EAAUzG,MAAMzB,KAAKtF,GAAOgO,EAAiBjN,IAAIf,KAExEkH,QAAQC,QAAkB9F,IAAT8F,IACvCJ,EAAQkP,EAAa/O,QAAQC,GAAkB,OAATA,IACtC+O,EAA6C,aAAjClI,EAAiB5B,MAAMhL,OAAwB6U,EAAaxO,SAAW+F,EAAUzG,MAAMU,OAEnG0O,EAAkBC,UACtB,MAIMC,EAAY,CAAC,CAAEtP,MAJG0D,MAAM6L,KAAKP,IAIY,CAAEhP,MAH9BA,EAAMzB,KAAK6B,GAASA,EAAKnH,KACPkH,QAAQlH,IAAQ+V,EAAa/I,IAAIhN,OAGhEwM,QAAe1D,EAAsBwE,kBAAkB+I,GAE7D,GAAIvU,GAAaA,EAAU9B,GAAI,CAC7B,MAAMuW,EAAczU,EAAU9B,SACxB8I,EAAsBmD,aAAa,CAACuB,EAAUxN,IAAKwM,EAAQ+J,GACjErI,IAAQsI,QAAQ,6BAClB,GAGIC,EAAoBL,UACxB,MAAMM,EAAkBjM,MAAM6L,KAAKP,GAE7BY,EADa5P,EAAMzB,KAAK6B,GAASA,EAAKnH,KACPkH,QAAQlH,IAAQ+V,EAAa/I,IAAIhN,KAIhE4W,EAAgB,IAFEF,EAAgBpR,KAAKtF,IAAE,CAAQ+G,MAAO,CAAC/G,UACrC2W,EAAkBlP,OAAS,EAAI,CAAC,CAAEV,MAAO4P,IAAuB,IAGpFnK,QAAe1D,EAAsBwE,kBAAkBsJ,GAE7D,GAAI9U,GAAaA,EAAU9B,GAAI,CAC7B,MAAMuW,EAAczU,EAAU9B,SACxB8I,EAAsBmD,aAAa,CAACuB,EAAUxN,IAAKwM,EAAQ+J,GACjErI,IAAQsI,QAAQ,6BAClB,GAGIK,EAAUpE,mBAAQ,IACf,CACL,CACE9N,MAAO,SACP2M,IAAK,SACLwF,OAAyB,IAAjB/P,EAAMU,OACdsP,OAAQA,CAAC5D,EAAQhM,IACfuI,cAACoF,IAAQ,CACPkC,QAASjB,EAAa/I,IAAI7F,EAAKnH,IAC/BkQ,SAAWwB,IACT,MAAMuF,EAAc,IAAItD,IAAIoC,GACxBrE,EAAEnB,OAAOyG,QACXC,EAAYC,IAAI/P,EAAKnH,IAErBiX,EAAY3K,OAAOnF,EAAKnH,IAE1BgW,EAAgBiB,EAAY,KAKpC,CACEtS,MACE0K,eAAC8H,IAAI,CAACC,QAAQ,gBAAe7H,SAAA,CAC3BG,cAAA,QAAAH,SAAM,SACNG,cAAC2H,IAAY,CAACC,UAAWzB,EAAQR,WAAY9D,QAASA,IAAMuE,EAAa,aAG7ExE,IAAK,OACLyF,OAAQA,CAAC5D,EAAQhM,IAEbuI,cAACF,IAAWa,KAAI,CAACC,KAAMnJ,EAAKjF,IAAKqO,OAAO,SAAQhB,SAC7CpI,EAAK3F,QAKd,CACEmD,MACE0K,eAAC8H,IAAI,CAACC,QAAQ,gBAAe7H,SAAA,CAC3BG,cAAA,QAAAH,SAAM,aACNG,cAAC2H,IAAY,CAACC,UAAWzB,EAAQR,WAAY9D,QAASA,IAAMuE,EAAa,iBAG7ExE,IAAK,WACLyF,OAAQA,CAAC5D,EAAQhM,IAEbuI,cAACF,IAAWC,KAAI,CAAC6H,UAAU,aAAaC,UAAU,EAAM5H,MAAO,CAAE6H,SAAU,KAAMjI,SAC9EpI,EAAKvB,aAAaY,YAK3B,CACE7B,MAAO,MACP2M,IAAK,MACLyF,OAAQA,CAAC5D,EAAQhM,KAAuB,IAADsQ,EACrC,OAAO/H,cAAA,QAAAH,SAA4B,QAA5BkI,EAAOtQ,EAAKvB,aAAa4C,WAAG,IAAAiP,OAAA,EAArBA,EAAuBlU,cAAoB,GAG7D,CACEoB,MAAO,UACP2M,IAAK,UACLyF,OAAQA,CAAC5D,EAAQhM,IACRuI,cAACc,GAAmB,CAACC,SAAUtJ,EAAKvB,aAAa1C,WAG5D,CACEyB,MAAO,iBACP2M,IAAK,iBACLyF,OAAQA,CAAC5D,EAAQhM,IACRuI,cAACc,GAAmB,CAACC,SAAUtJ,EAAKvB,aAAa0B,mBAG5D,CACE3C,MACE0K,eAAC8H,IAAI,CAACC,QAAQ,gBAAe7H,SAAA,CAC3BG,cAAA,QAAAH,SAAM,cACNG,cAAC2H,IAAY,CAACC,UAAWzB,EAAQR,WAAY9D,QAASA,IAAMuE,EAAa,oBAG7ExE,IAAK,eACLyF,OAAQA,CAAC5D,EAAQhM,IACRuI,cAACS,GAAe,CAACC,OAAQjJ,EAAKtB,qBAAqB,MAG9D,CACElB,MAAO,kBACP2M,IAAK,sBACLyF,OAAQA,CAAC5D,EAAQhM,IAC0B,IAArCA,EAAKtB,qBAAqB4B,OACrB,IAEFN,EAAKtB,qBAAqB,GAAGvC,WAAWoU,QAAQ,IAG3D,CACE/S,MACE0K,eAAC8H,IAAI,CAACC,QAAQ,gBAAe7H,SAAA,CAC3BG,cAAA,QAAAH,SAAM,iBACNG,cAAC2H,IAAY,CAACC,UAAWzB,EAAQR,WAAY9D,QAASA,IAAMuE,EAAa,gBAG7ExE,IAAK,UACLyF,OAAQA,CAAC5D,EAAQhM,KACf,MAAM/B,EAAe+B,EAAK/B,aAAatD,EAAU9B,IACjD,YAAqBqB,IAAjB+D,QAA4D/D,IAA9B+D,EAAatB,aACtC,IAEFsB,EAAatB,aAAa4T,QAAQ,EAAE,GAG/C,CACE/S,MACE0K,eAAC8H,IAAI,CAACC,QAAQ,gBAAe7H,SAAA,CAC3BG,cAAA,QAAAH,SAAM,cACNG,cAAC2H,IAAY,CAACC,UAAWzB,EAAQR,WAAY9D,QAASA,IAAMuE,EAAa,cAG7ExE,IAAK,QACLyF,OAAQA,CAAC5D,EAAQhM,KACf,MAAM/B,EAAe+B,EAAK/B,aAAatD,EAAU9B,IACjD,YAAqBqB,IAAjB+D,QAA0D/D,IAA5B+D,EAAarB,WACtC,IAEFqB,EAAarB,WAAW2T,QAAQ,EAAE,GAG7C,CACE/S,MAAO,YACP2M,IAAK,YACLyF,OAAQA,CAAC5D,EAAQhM,IACRuI,cAACiI,GAAkB,CAACxQ,KAAMA,OAItC,CAACrF,EAAU9B,GAAI+G,EAAMU,OAAQsO,EAAcI,IAE9ClH,qBAAU,KACRjB,EAAiBvB,WAAWe,EAAUzG,MAAM,GAC3C,CAACiH,IAEJ,MAwBMmE,EAAcpL,EAAM6Q,MAAMzQ,GAASA,EAAKhC,UAAU0S,SAAS9J,EAAU9M,iBAAkBQ,OAE7F,IAAIqW,EACJ,GAAI/B,EAAajV,KAAO,GAAKiG,EAAMU,OAAS,EAAG,CAC7C,MAAMsQ,EACJrI,cAACqF,IAAM,CAAkBzJ,KAAK,UAAUiG,QAASkF,EAAkBlH,SAAC,sBAAxD,cAIRyI,EACJtI,cAACqF,IAAM,CAAgBzJ,KAAK,UAAUiG,QAAS4E,EAAgB5G,SAAC,oBAApD,YAKZuI,EADwB,IAAtB/B,EAAajV,MAAciV,EAAajV,OAASiG,EAAMU,OAC7C,CAACsQ,GAED,CAACA,EAAaC,GAE5BF,EAAYpI,cAACJ,IAAK,CAAAC,SAAEuI,GACtB,CAEA,OACEzI,eAAC8H,IAAI,CAACc,UAAU,EAAMC,IAAI,QAAO3I,SAAA,CAC9BuI,EACDpI,cAACyI,IAAK,CACJb,UAAWzB,EAAQX,MACnBkD,UAAU,EACVC,YAAY,EACZvX,KAAK,QACLwX,OAAO,KACPzB,QAASA,EACT0B,WAAYxR,EACZyR,QAAStC,EACTuC,aAAetR,GACNA,EAAKhC,UAAU0S,SAAS9J,EAAU9M,iBAAkBQ,KAAOoU,EAAQN,YAAc,KAG5F7F,cAACwC,GAAa,CAAiBnL,MAAOA,EAAOoL,YAAaA,EAAaC,UAAWA,EAAWC,SA9D3EqG,IACpB,QAAerX,IAAXqX,EAEF,YADA5C,OAAazU,GAIf,MAAMsX,EAAc5K,EAAU9M,iBACxB2X,EAAe7R,EAAM6Q,MAAMzQ,GAASA,EAAKhC,UAAU0S,SAASc,EAAYlX,OAC9E,IAAIoX,EACJ,QAAqBxX,IAAjBuX,EAA4B,CAC9B,MAAME,EAAYpS,EAAuBG,gBAAgB3B,EAAQsI,EAAWzG,EAAO4R,EAAY3Y,GAAI0Y,EAAO1T,WAC1G8T,EAAUzS,YAAYnB,EAAQwT,EAAOpS,KAAMoS,EAAO1T,WAClD6T,EAAK7K,EAAiBjF,qBAAqByE,EAAU1L,UAAWgX,EAClE,KAAO,CACL,MAAMA,EAAY,IAAI5Q,EAAuB0Q,GAC7CE,EAAUzS,YAAYnB,EAAQwT,EAAOpS,KAAMoS,EAAO1T,WAClD6T,EAAK7K,EAAiB3E,qBAAqBmE,EAAU1L,UAAWgX,EAClE,CAEAD,EAAG9Z,MAAK,KACN+W,OAAazU,EAAU,GACvB,EAyCqHS,UAAWA,EAAU9B,IAAtHoS,KACf,KAKPuF,GAAsDjT,IAAe,IAAd,KAAEyC,GAAMzC,EACnE,MAAMwB,EAAOuM,mBAAQ,IACZ3I,OAAO5I,OAAOiG,EAAKlB,2BACzB,CAACkB,IAEJ,OACEuI,cAACF,IAAWC,KAAI,CAAC8H,UAAU,EAAM5H,MAAO,CAAE6H,SAAU,KAAMjI,SACvDsB,GACC3K,EAAKZ,KAAKsO,GACRlE,cAACF,IAAWa,KAAI,CAAeE,OAAO,SAASD,KAAMsD,EAAI1R,IAAIqN,SAC1DqE,EAAIjP,OAASiP,EAAI1R,KADE0R,EAAI1R,QAI3BY,GACC4M,cAAA,QAAAH,SAA2B,gBAAa,OAAAxP,OAAtB+C,OAGN,EC5STiW,GAAgC/Z,IAA0B,IAAvBkD,IAAKA,EAAG,MAAE8W,GAAOha,EAC/D,MAAMia,EAAKzK,IAAYwK,GACjB9P,EAAS+P,EAAGlY,IAAImB,GAEtB,OAAe,OAAXgH,EAEAwG,cAACF,IAAWa,KAAI,CAACC,KAAMpO,EAAKqO,OAAO,SAAQhB,SAAC,mBAMjClO,IAAX6H,GACFoB,QAAQC,IAAI,CAAEyO,QAAOC,KAAI/W,MAAKgH,WAE5BwG,cAACF,IAAWa,KAAI,CAACC,KAAMpO,EAAKqO,OAAO,SAAQhB,SAAC,gBAO9CG,cAACF,IAAWa,KAAI,CAACC,KAAMpO,EAAKqO,OAAO,SAAQhB,SACxCrG,EAAO1H,MACQ,ECjBhB0X,GAAmB,CAAErY,QAAS,GAAI2B,MAAO,GAElC2W,GAA8DvD,aAAS5W,IAAoB,IAAnB,UAAE8C,GAAW9C,EAChG,MAAM,sBAAE8J,EAAqB,aAAEoC,EAAY,qBAAEE,GAAyBoD,KAC/D4K,EAAkBC,GAAuBrK,wBAA6B3N,IACtEiY,EAAsBC,GAA2BvK,mBAAsB,IAAI2E,KAE5EkD,EAAUpE,mBAAQ,IACf,CACL,CACE9N,MAAO,IACP2M,IAAK,SACLyF,OAAQA,CAAC5D,EAAQhM,IAA2BuI,cAACoF,IAAQ,CAAC5E,SAAWwB,GAAM8H,EAAgBrS,EAAMuK,EAAEnB,OAAOyG,SAAUA,QAASsC,EAAqBtM,IAAI7F,EAAKnH,MACvJyZ,OAAQA,CAACjG,EAAqBC,IAAwBD,EAAEzM,MAAMU,OAASgM,EAAE1M,MAAMU,QAEjF,CACE9C,MAAO,OACP+U,UAAW,OACXpI,IAAK,OACLyF,OAAQA,CAAC5D,EAAQhM,IAEbuI,cAACF,IAAWa,KAAI,CAACC,KAAMnJ,EAAKjF,IAAKqO,OAAO,SAAQhB,SAC7CpI,EAAK3F,MAAQ,WAIpBiY,OAAQA,CAACjG,EAAqBC,IAAwBD,EAAEhS,KAAKmY,cAAclG,EAAEjS,OAE/E,CACEmD,MAAO,OACP2M,IAAK,OACLyF,OAAQA,CAAC5D,EAAQhM,IACRuI,cAAA,QAAM4H,UAAU,aAAY/H,SAAEpI,EAAKmE,OAE5CmO,OAAQA,CAACjG,EAAqBC,IAAwBD,EAAElI,KAAKqO,cAAclG,EAAEnI,OAE/E,CACE3G,MAAO,OACP2M,IAAK,OACLyF,OAAQA,CAAC5D,EAAQhM,IACRuI,cAAA,QAAM4H,UAAU,aAAY/H,SAAEpI,EAAKoE,OAE5CkO,OAAQA,CAACjG,EAAqBC,IAAwBD,EAAEjI,KAAKoO,cAAclG,EAAElI,OAE/E,CACE5G,MAAO,WACP2M,IAAK,WACLyF,OAAQA,CAAC3V,EAAYoM,SACQnM,IAAvBmM,EAAUhH,eAAqDnF,IAA3BmM,EAAUhH,SAASsE,UAAgDzJ,IAA3BmM,EAAUhH,SAASuE,IAC3F,GAANhL,OAAUyN,EAAUhH,SAASsE,IAAI4M,QAAQ,GAAE,MAAA3X,OAAKyN,EAAUhH,SAASuE,IAAI2M,QAAQ,IAE1E,SAET+B,OAAQA,CAACjG,EAAqBC,KAAyB,IAADmG,EAAAC,EAAAC,EAAAC,EACpD,MAAMC,EAAOxG,EAAEhN,SAAQ,GAAAzG,OAAoB,QAApB6Z,EAAMpG,EAAEhN,SAASsE,WAAG,IAAA8O,OAAA,EAAdA,EAAgBlC,QAAQ,GAAE,KAAA3X,OAAkB,QAAlB8Z,EAAIrG,EAAEhN,SAASuE,WAAG,IAAA8O,OAAA,EAAdA,EAAgBnC,QAAQ,IAAO,GACpFuC,EAAOxG,EAAEjN,SAAQ,GAAAzG,OAAoB,QAApB+Z,EAAMrG,EAAEjN,SAASsE,WAAG,IAAAgP,OAAA,EAAdA,EAAgBpC,QAAQ,GAAE,KAAA3X,OAAkB,QAAlBga,EAAItG,EAAEjN,SAASuE,WAAG,IAAAgP,OAAA,EAAdA,EAAgBrC,QAAQ,IAAO,GAC1F,OAAOsC,EAAKL,cAAcM,EAAK,GAGnC,CACEtV,MAAO,UACP2M,IAAK,UACLyF,OAAQA,CAAC5D,EAAQhM,SACO9F,IAAlB8F,EAAKX,UAA2D,IAAjCW,EAAKX,SAAStD,QAAQuE,OAChD,SAIPiI,cAACJ,IAAK,CAACxH,MAAO4H,cAACwK,IAAO,CAAC5O,KAAK,aAAciE,SACvCpI,EAAKX,SAAStD,QAAQoC,KAAKpC,GAC1BwM,cAACqJ,GAAM,CAAe7W,IAAKgB,EAAS8V,MAAM,gBAA7B9V,OAKrBuW,OAAQA,CAACjG,EAAqBC,KAAyB,IAAD0G,EAAAC,EACpD,MAAMC,GAAqB,QAAVF,EAAA3G,EAAEhN,gBAAQ,IAAA2T,OAAA,EAAVA,EAAYjX,QAAQoC,KAAKgV,GAAQpP,EAAanI,SAASuX,GAAM9Y,OAAMqP,KAAK,OAAQ,GAC3F0J,GAAqB,QAAVH,EAAA3G,EAAEjN,gBAAQ,IAAA4T,OAAA,EAAVA,EAAYlX,QAAQoC,KAAKgV,GAAQpP,EAAanI,SAASuX,GAAM9Y,OAAMqP,KAAK,OAAQ,GACjG,OAAOwJ,EAASV,cAAcY,EAAS,GAG3C,CACE5V,MAAO,iBACP2M,IAAK,QACLyF,OAAQA,CAAC5D,EAAQhM,SACO9F,IAAlB8F,EAAKX,UAAmE,IAAzCW,EAAKX,SAASc,gBAAgBG,OACxD,SAIPiI,cAACJ,IAAK,CAACxH,MAAO4H,cAACwK,IAAO,CAAC5O,KAAK,aAAciE,SACvCpI,EAAKX,SAASc,gBAAgBhC,KAAKkV,GAClC9K,cAACqJ,GAAM,CAAgB7W,IAAKsY,EAAUxB,MAAM,wBAA/BwB,OAKrBf,OAAQA,CAACjG,EAAqBC,KAAyB,IAADgH,EAAAC,EACpD,MAAMC,GAAmB,QAAVF,EAAAjH,EAAEhN,gBAAQ,IAAAiU,OAAA,EAAVA,EAAYnT,gBAAgBhC,KAAKgV,GAAQlP,EAAqBrI,SAASuX,GAAM9Y,OAAMqP,KAAK,OAAQ,GACzG+J,GAAmB,QAAVF,EAAAjH,EAAEjN,gBAAQ,IAAAkU,OAAA,EAAVA,EAAYpT,gBAAgBhC,KAAKgV,GAAQlP,EAAqBrI,SAASuX,GAAM9Y,OAAMqP,KAAK,OAAQ,GAC/G,OAAO8J,EAAOhB,cAAciB,EAAO,GAGvC,CACEjW,MAAO,eACP2M,IAAK,cACLyF,OAAQA,CAAC5D,EAAQhM,KACf,MAAM0T,EAAK1T,EAAKO,qBAChB,YAAWrG,IAAPwZ,EACK,SAEFnL,cAACqJ,GAAM,CAAC7W,IAAK2Y,EAAG3Y,IAAK8W,MAAM,oBAAqB,GAI3D,CACErU,MAAO,aACP2M,IAAK,oBACLyF,OAAQA,CAAC5D,EAAQhM,KACf,MAAM0T,EAAK1T,EAAKO,qBAChB,YAAWrG,IAAPwZ,EACK,SAEFA,EAAGvX,WAAWoU,QAAQ,EAAE,GAGnC,CACE/S,MAAO,eACP+U,UAAW,eACX3C,OAAQA,CAAC5D,EAAQhM,SACW9F,IAAtB8F,EAAK/B,mBAAiE/D,IAAnC8F,EAAK/B,aAAatB,aAChDqD,EAAK/B,aAAatB,aAAa4T,QAAQ,GAEzC,SAET+B,OAAQA,CAACjG,EAAqBC,KAAyB,IAADqH,EAAAC,EAGpD,QAF+B,QAAdD,EAAAtH,EAAEpO,oBAAY,IAAA0V,OAAA,EAAdA,EAAgBhX,eAAgB,KAClB,QAAdiX,EAAAtH,EAAErO,oBAAY,IAAA2V,OAAA,EAAdA,EAAgBjX,eAAgB,EACvB,GAG9B,CACEa,MAAO,YACP+U,UAAW,aACX3C,OAAQA,CAAC5D,EAAQhM,SACW9F,IAAtB8F,EAAK/B,mBAA+D/D,IAAjC8F,EAAK/B,aAAarB,WAChDoD,EAAK/B,aAAarB,WAAW2T,QAAQ,GAEvC,SAET+B,OAAQA,CAACjG,EAAqBC,KAAyB,IAADuH,EAAAC,EAGpD,QAF6B,QAAdD,EAAAxH,EAAEpO,oBAAY,IAAA4V,OAAA,EAAdA,EAAgBjX,aAAc,KAChB,QAAdkX,EAAAxH,EAAErO,oBAAY,IAAA6V,OAAA,EAAdA,EAAgBlX,aAAc,EACvB,GAG1B,CACEY,MAAO,SACP2M,IAAK,SACLyF,OAAQA,CAAC5D,EAAQhM,IAEbuI,cAACJ,IAAK,CAAAC,SACJG,cAACqF,IAAM,CACLnF,MAAM,UACN9O,KAAK,SACLoa,KAAMxL,cAAC2H,IAAY,IACnB8D,QAAQ,SACR5J,QAASA,KACHpK,EAAKnH,KAAOoZ,EACdC,OAAoBhY,GAEpBgY,EAAoBlS,EAAKnH,GAC3B,EACAuP,SACH,cAQV,CAAU,OAATzN,QAAS,IAATA,OAAS,EAATA,EAAW9B,GAAIkL,EAAcE,EAAsBkO,EAAsBF,IAE7EnK,qBAAU,KACUmH,gBACE/U,IAAdS,SACIgH,EAAsBiE,iBAAiBjL,EAC/C,EAEFsZ,EAAW,GACV,CAACtZ,EAAWgH,IAEf,MAAM0Q,EAAkBA,CAACrS,EAAwBkU,KAC/C,MAAMC,EAA0B,IAAI3H,IAAI2F,GACpC+B,EACFC,EAAwBpE,IAAI/P,EAAKnH,IAEjCsb,EAAwBhP,OAAOnF,EAAKnH,IAEtCuZ,EAAwB+B,EAAwB,EAsB5CpF,EAAkD,aAAtCpN,EAAsBsD,MAAMhL,MACxCma,OAAkCla,IAAdS,GAA2BoU,EAAYgD,GAAmBpQ,EAAsBmE,eAAenL,GAEzH,OACEuN,eAAAuB,WAAA,CAAArB,SAAA,CACG+J,EAAqBxY,KAAO,EACzB,CACE4O,cAAA,OAAAH,SACEG,cAACqF,IAAM,CAACzJ,KAAK,UAAUiG,QA3Bf6E,UAClB,MAAM7J,EAAU9B,MAAM6L,KAAKgD,GAGrBkC,EAAgB,CACpB,CACEzU,MAJe0D,MAAM6L,KAAKgD,GAAsBjG,SAASoI,GAAgB3S,EAAsB/H,IAAI0a,GAAc1U,MAAMzB,KAAKoW,GAAYrQ,EAAiBG,MAAMkQ,SAO7JlP,QAAe1D,EAAsBwE,kBAAkBkO,GAE7D,GAAI1Z,GAAaA,EAAU9B,GAAI,CAC7B,MAAMuW,EAAczU,EAAU9B,GAC9BkO,IAAQsI,QAAQ,0BAA2B,GAC3C+C,EAAwB,IAAI5F,WACtB7K,EAAsBmD,aAAaM,EAASC,EAAQ+J,EAC5D,GAWuDoF,SAAwC,IAA9BrC,EAAqBxY,KAAWyO,SAAC,2BAI1FG,cAACyI,IAAK,CACJC,UAAU,EACVtX,KAAK,QACLwX,OAAO,KACPD,YAAY,EACZxB,QAAS,CACP,CACElS,MAAO,SACP2M,IAAK,QACLyF,OAAQA,CAAC5D,EAAQhM,IAA2BuI,cAACoF,IAAQ,CAACxJ,KAAK,UAAU0L,SAAS,EAAMzF,QAASA,IAAMiI,EAAgBrS,GAAM,SAExH0P,EAAQ+E,MAAM,IAEnBrD,WAAY9N,MAAM6L,KAAKgD,GAAsBhU,KAAKtF,GAAO8I,EAAsB/H,IAAIf,QAGvF,GACJ0P,cAACyI,IAAK,CACJC,UAAU,EACVtX,KAAK,QACLwX,OAAO,KACPzB,QAASA,EACT0B,WAAYgD,EAAkB1a,QAC9B2X,UAAStC,GAAY,CAAEpV,KAAM,SAC7B+a,WAAY,CACVC,kBAAoB3U,GACdiS,IAAqBjS,EAAKnH,GACrB0P,cAACgG,GAAoB,CAAC5T,UAAWA,EAAY0L,UAAWrG,IAE1D,KAET4U,kBAAkB,EAClBC,gBAAiB,IAAK5C,EAAmB,CAACA,GAAoB,SAGjE,ICvRM6C,GAAWrG,aAAS,KAC/B,MAAOhH,EAAYsN,EAAgBrN,GR0E9B,WACL,MAAM,eAAExJ,GAAmBmJ,KACpB2N,EAAMC,GAAWpN,mBAAqB,CAC3ClN,eAAWT,IAOPgb,EAA2B5J,mBAAQ,KACvC,QAAuBpR,IAAnB8a,EAAKra,UACP,MAAO,CACLA,eAAWT,GAGf,MAAMS,EAAYuD,EAAepD,UAAUka,EAAKra,WAChD,MAAO,CACLA,UAAyB,OAAdA,OAAqBT,EAAYS,EAC7C,GACA,CAACuD,EAAexE,QAAQC,KAAMqb,EAAKra,YAEtC,MAAO,CAACqa,EAAME,EAhBYC,IACxBF,EAAQE,EAAQ,EAgBpB,CQjGsDC,GAEpD,OACElN,eAAC8H,IAAI,CAACc,UAAU,EAAMC,IAAI,QAAO3I,SAAA,CAC/BG,cAACf,EAAS,CAACC,WAAYA,EAAYC,cAAeA,IAClDa,cAACyJ,GAAqB,CAACrX,UAAWoa,EAAepa,cAC5C,I,qBCNX,MAAMmT,GAAM,CACVuH,aAAc,CACZC,eAAgB,SAChBC,UAAW,qBAEbC,WAAY,CACV,iBAAkB,CAChBC,aAAc,kBACdC,WAAY,mBAEd,uBAAwB,CACtBD,aAAc,kBACdC,WAAY,mBAEd,cAAe,CACbC,OAAQ,GACRC,aAAc,EACd/K,WAAY,GAEdgL,YAAa,GACbC,aAAc,GACdP,UAAW,sBA6CFQ,IAzBevH,aAAWV,GAAXU,EAAgB3W,IAAiJ,IAAtG,QAAE6W,EAAO,MAAEsH,EAAK,OAAEC,EAAM,UAAE9F,EAAS,MAAE3H,EAAK,gBAAE0N,GAAoDre,EACrL,MAAMwH,EAAW8W,cAKX/a,EAAQuH,OAAOyT,KAAKJ,GAAO7X,KAAI,CAACkY,EAAW1a,IAExC2a,GAAYD,GADmB,IAApBH,GAAsC,IAAVva,EAAc,OAAS,GAC5Bqa,EAAMK,MAE3CE,EAAkBC,YAAmBnX,EAAU4W,GAErD,OACE1N,cAACkO,KAAI,CACHC,KAAK,aACLvG,UAAWzB,EAAQ2G,mBAA8Bnb,IAAdiW,EAA0B,IAAMA,EAAY,IAC/E3H,MAAOA,EACP4B,QAfcG,IAChB0L,EAAO1L,EAAEJ,KAAKwM,KAAK,CAAC,EAAG,CAAC,GAAG/J,MAAM,EAe/BgK,kBAAkC1c,IAApBqc,EAAgC,CAACA,QAAmBrc,EAAUkO,SAE3EhN,GACI,IAIeoT,aAAWV,GAAXU,EAAgBjR,IAAiJ,IAAtG,QAAEmR,EAAO,MAAEsH,EAAK,OAAEC,EAAM,UAAE9F,EAAS,MAAE3H,EAAK,gBAAE0N,GAAoD3Y,EACnL,MAAM8B,EAAW8W,cAKX/a,EAAQuH,OAAOyT,KAAKJ,GAAO7X,KAAI,CAACkY,EAAW1a,IAExC2a,GAAYD,GADmB,IAApBH,GAAsC,IAAVva,EAAc,OAAS,GAC5Bqa,EAAMK,MAE3CE,EAAkBC,YAAmBnX,EAAU4W,GAErD,OACE1N,cAACkO,KAAI,CACHC,KAAK,aACLvG,UAAWzB,EAAQ8G,iBAA4Btb,IAAdiW,EAA0B,IAAMA,EAAY,IAC7E3H,MAAOA,EACP4B,QAfcG,IAChB0L,EAAO1L,EAAEJ,KAAKwM,KAAK,CAAC,EAAG,CAAC,GAAG/J,MAAM,EAe/BgK,kBAAkC1c,IAApBqc,EAAgC,CAACA,QAAmBrc,EAAUkO,SAE3EhN,GACI,KAIX,SAASkb,GAAYnM,EAAagG,EAAmBpG,GACnD,IAAI3B,EAAUyO,EAEd,GAAqB,kBAAV9M,EACT3B,EAAW2B,OACN,GAAIzC,IAAMwP,eAAe/M,GAC9B3B,EAAW2B,MACN,CACL,MAAQ3B,SAAU2O,KAAcC,GAAejN,EAC/C3B,EAAW2O,EACXF,EAAYG,CACd,CAEA,OACEzO,cAACkO,KAAKrJ,KAAI,CAAC+C,UAAWA,KAAyB0G,EAASzO,SACrDA,GADmC+B,EAI1C,CC5GO,MAAM8M,GAAyBxI,aAAS5W,IAA+C,IAA9C,SAAEuQ,GAAsCvQ,EACtF,MAAM,UAAE+O,GAAcS,IAWtB,OARAS,qBAAU,KACRlB,EAAUnN,aAAa7B,MAAM6B,IACtBA,GACHwc,GAAOnd,MAAM6d,OAAO/J,MACtB,GACA,GACD,CAAChG,IAEGwB,CAAQ,ICoBJ6N,GAAS,CACpBnd,MAAO,IAAIoe,IAAc,CACvBC,UCpCqBC,KACvB,MAAM,UAAExQ,GAAcS,KAEftO,EAAUse,GAAexP,mBAAiB,KAC1C7O,EAAUse,GAAezP,mBAAiB,KAC1CpC,EAAO8R,GAAY1P,mBAAiB,IAE3CC,qBAAU,KACRlB,EAAUnN,aAAa7B,MAAM6B,IACvBA,GAAYwc,GAAOuB,KAAKb,KAAK,CAAEhc,eAAWT,IAAa0S,MAAM,GACjE,GACD,CAAChG,IAYJ,OACEsB,eAAA,OAAKiI,UAAU,kBAAiB/H,SAAA,CAC9BG,cAAA,MAAAH,SAAI,UACJF,eAAA,QAAMuP,SAbUxI,UAClByI,EAAMC,iBACN,UACQ/Q,EAAU9N,MAAMC,EAAUC,GAChCid,GAAOuB,KAAKb,KAAK,CAAEhc,eAAWT,IAAa0S,MAC7C,CAAE,MAAO/S,GACP0d,EAAS,6CACX,GAM+BpH,UAAU,aAAY/H,SAAA,CACjDF,eAAA,OAAKiI,UAAU,aAAY/H,SAAA,CACzBG,cAAA,SAAOqP,QAAQ,WAAUxP,SAAC,cAC1BG,cAAA,SAAOpE,KAAK,OAAOtL,GAAG,WAAWoB,MAAOlB,EAAUgQ,SAAWwB,GAAM8M,EAAY9M,EAAEnB,OAAOnP,OAAQoT,UAAQ,OAE1GnF,eAAA,OAAKiI,UAAU,aAAY/H,SAAA,CACzBG,cAAA,SAAOqP,QAAQ,WAAUxP,SAAC,cAC1BG,cAAA,SAAOpE,KAAK,WAAWtL,GAAG,WAAWoB,MAAOjB,EAAU+P,SAAWwB,GAAM+M,EAAY/M,EAAEnB,OAAOnP,OAAQoT,UAAQ,OAE7G5H,GAAS8C,cAAA,KAAG4H,UAAU,gBAAe/H,SAAE3C,IACxC8C,cAAA,UAAQpE,KAAK,SAASgM,UAAU,eAAc/H,SAAC,eAI7C,EDHNyP,QAAQ,GAADjf,OAAKL,EAAU,UACtBuf,OAAO,IAETN,KAAM,IAAIO,IAAiB,CACzBZ,UAAWrC,GACX+C,QAAQ,GAADjf,OAAKL,EAAU,KACtBuf,OAAO,EACPE,YAAa,CACXrd,UAAW,qBAIhBqM,OAAeiR,QAAUhC,GAG1BiC,YAAYjC,IA5CWkB,GACbpN,IACN,MAAMoO,EAAU7Q,IAAM8Q,cAAcjB,EAAWpN,GAE/C,OACE7B,eAACC,IAAK,CAACkQ,UAAU,WAAW7P,MAAO,CAAEG,MAAO,QAASP,SAAA,CACnDG,cAACwN,GAAU,CACTC,MAAO,CACLwB,KAAMjP,cAAA,QAAAH,SAAM,mBAEd6N,OAAQA,GACRC,iBAAiB,IAEnB3N,cAAC0O,GAAsB,CAAA7O,SACrBG,cAAA,OAAK4H,UAAU,iBAAgB/H,SAAE+P,QAE7B,GA4Bc,CAAC,U,kCEtDtB,MAAMG,GAAwBzgB,IAA+C,IAA9C,SAAEuQ,GAAsCvQ,EAK5E,OAJAiQ,qBAAU,KdqCHyQ,QAAQC,IAAI,CAACza,EAAO2F,iBAAiB7H,WAAYkC,EAAOgG,aAAalI,WAAYkC,EAAOkG,qBAAqBpI,YcpC3F,GACtB,IAEIuM,CAAQ,Ed6BRmQ,QAAQE,Ue3BJ7gB,MAAK,KAChB8gB,IAAS9I,OACPrH,cAACpB,EAAawR,SAAQ,CAAC1e,MAAO8D,EAAOqK,SACnCG,cAACqQ,KAAc,CAACC,OAAQC,KAAS1Q,SAC/BG,cAAC+P,GAAqB,CAAAlQ,SACpBG,cAACwQ,IAAG,CAACC,YAAY,EAAM/C,OAAQA,WAIrC/Y,SAAS+b,eAAe,QACzB,IAMHxhB,G","file":"static/js/main.25b5a3bd.chunk.js","sourcesContent":["import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export const THEME: \"dark\" | \"light\" = \"light\";\n\nexport const PLATFORM: \"native\" | \"web\" = process.env.REACT_APP_PLATFORM === \"native\" ? \"native\" : \"web\";\n\n// url of the API server\nexport const SERVER: string = process.env.REACT_APP_PLATFORM === \"native\" ? (process.env.REACT_APP_API_SERVER as string) : \"\";\n\n// path to the static directory for serving either local or remote css/js/assets\nexport const PUBLIC_URL: string = process.env.PUBLIC_URL;\n","import { RStore } from \"gena-app\";\nimport { SERVER } from \"../../env\";\nimport { runInAction } from \"mobx\";\nimport axios from \"axios\";\n\nexport interface User {\n  id: string;\n  url: string;\n  email: string;\n  name: string;\n}\n\nexport class UserStore extends RStore<string, User> {\n  constructor() {\n    super(`${SERVER}/api/v1`, { id: \"username\" }, false);\n  }\n\n  async login(username: string, password: string) {\n    let resp = await axios.post(`${SERVER}/api/v1/login`, { username, password });\n    return runInAction(() => {\n      this.set(this.deserialize(resp.data));\n    });\n  }\n\n  async isLoggedIn(): Promise<boolean> {\n    if (this.records.size > 0) {\n      return true;\n    }\n\n    try {\n      let resp = await axios.get(`${SERVER}/api/v1/whoami`);\n      runInAction(() => {\n        this.set(this.deserialize(resp.data));\n      });\n      return true;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  public getCurrentUser(): User | undefined {\n    if (this.records.size === 0) return undefined;\n    return this.records.values().next().value || undefined;\n  }\n\n  public deserialize(obj: any): User {\n    return {\n      id: obj.username,\n      email: obj.email,\n      name: obj.name,\n      url: `https://minmod.isi.edu/users/${obj.username}`,\n    };\n  }\n}\n","import { RStore, FetchResponse } from \"gena-app\";\nimport { SERVER } from \"../../env\";\n\nexport interface Commodity {\n  id: string; // not the URI, e.g. \"Q578\"\n  uri: string;\n  name: string;\n  isCritical: number;\n}\n\nexport class CommodityStore extends RStore<string, Commodity> {\n  constructor() {\n    super(`${SERVER}/api/v1/commodities`, undefined, false);\n  }\n\n  async fetchCriticalCommotities() {\n    if (this.refetch || this.records.size === 0) {\n      await this.fetch({});\n    }\n\n    const records = [];\n    for (const commodity of this.records.values()) {\n      if (commodity !== null && commodity.isCritical) {\n        records.push(commodity);\n      }\n    }\n    return records;\n  }\n\n  public getByName(name: string): Commodity | undefined | null {\n    if (this.records.size === 0) {\n      return undefined;\n    }\n\n    for (const commodity of this.records.values()) {\n      if (commodity !== null && commodity.name === name) {\n        return commodity;\n      }\n    }\n    return null;\n  }\n\n  public deserialize(obj: any): Commodity {\n    return {\n      id: obj.uri.substring(obj.uri.lastIndexOf(\"/\") + 1),\n      uri: obj.uri,\n      name: obj.name,\n      isCritical: obj.is_critical,\n    };\n  }\n\n  protected normRemoteSuccessfulResponse(resp: any): FetchResponse {\n    return { items: resp.data, total: resp.total };\n  }\n}\n","import { RStore, FetchResponse, SingleKeyUniqueIndex } from \"gena-app\";\nimport { SERVER } from \"../../env\";\n\nexport interface DepositType {\n  id: string; // it is the URI\n  uri: string;\n  name: string;\n  environment: string;\n  group: string;\n}\n\nexport class DepositTypeStore extends RStore<string, DepositType> {\n  constructor() {\n    super(`${SERVER}/api/v1/deposit-types`, undefined, false, [new SingleKeyUniqueIndex(\"name\", \"id\"), new SingleKeyUniqueIndex(\"uri\", \"id\")]);\n  }\n\n  get name2id() {\n    return this.indices[0] as SingleKeyUniqueIndex<string, string, DepositType>;\n  }\n\n  get uri2id() {\n    return this.indices[1] as SingleKeyUniqueIndex<string, string, DepositType>;\n  }\n\n  public getByName(name: string): DepositType | undefined {\n    let id = this.name2id.index.get(name);\n    return id === undefined ? undefined : this.records.get(id)!;\n  }\n\n  public getByURI(uri: string): DepositType | undefined {\n    let id = this.uri2id.index.get(uri);\n    return id === undefined ? undefined : this.records.get(id)!;\n  }\n\n  async fetchAll(): Promise<void> {\n    if (this.refetch || this.records.size === 0) {\n      await this.fetch({});\n    }\n  }\n\n  public deserialize(obj: any): DepositType {\n    return {\n      ...obj,\n      id: obj.uri,\n    };\n  }\n\n  protected normRemoteSuccessfulResponse(resp: any): FetchResponse {\n    return { items: resp.data, total: resp.total };\n  }\n}\n","import { RStore, FetchResponse } from \"gena-app\";\nimport { SERVER } from \"../../env\";\n\nexport interface Country {\n  id: string; // it is the URI\n  name: string;\n}\n\nexport class CountryStore extends RStore<string, Country> {\n  constructor() {\n    super(`${SERVER}/api/v1/countries`, undefined, false);\n  }\n\n  public getByURI(uri: string): Country | undefined {\n    const country = this.records.get(uri);\n    if (country === null) return undefined;\n    return country;\n  }\n\n  async fetchAll(): Promise<void> {\n    if (this.refetch || this.records.size === 0) {\n      await this.fetch({});\n    }\n  }\n\n  public deserialize(obj: any): Country {\n    return {\n      id: obj.uri,\n      name: obj.name,\n    };\n  }\n\n  protected normRemoteSuccessfulResponse(resp: any): FetchResponse {\n    return { items: resp.data, total: resp.total };\n  }\n}\n","import { RStore, FetchResponse } from \"gena-app\";\nimport { SERVER } from \"../../env\";\n\nexport interface StateOrProvince {\n  id: string; // it is the URI\n  name: string;\n}\n\nexport class StateOrProvinceStore extends RStore<string, StateOrProvince> {\n  constructor() {\n    super(`${SERVER}/api/v1/states-or-provinces`, undefined, false);\n  }\n\n  public getByURI(uri: string): StateOrProvince | undefined {\n    const country = this.records.get(uri);\n    if (country === null) return undefined;\n    return country;\n  }\n\n  async fetchAll(): Promise<void> {\n    if (this.refetch || this.records.size === 0) {\n      await this.fetch({});\n    }\n  }\n\n  public deserialize(obj: any): StateOrProvince {\n    return {\n      id: obj.uri,\n      name: obj.name,\n    };\n  }\n\n  protected normRemoteSuccessfulResponse(resp: any): FetchResponse {\n    return { items: resp.data, total: resp.total };\n  }\n}\n","export class CandidateEntity {\n  source: string;\n  confidence: number;\n  observedName?: string;\n  normalizedURI?: string;\n\n  public constructor({ source, confidence, observedName, normalizedURI }: { source: string; confidence: number; observedName?: string; normalizedURI?: string }) {\n    this.source = source;\n    this.confidence = confidence;\n    this.observedName = observedName;\n    this.normalizedURI = normalizedURI;\n  }\n\n  public clone(): CandidateEntity {\n    return new CandidateEntity({\n      source: this.source,\n      confidence: this.confidence,\n      observedName: this.observedName,\n      normalizedURI: this.normalizedURI,\n    });\n  }\n\n  public static deserialize(obj: any): CandidateEntity {\n    return new CandidateEntity({\n      source: obj.source,\n      confidence: obj.confidence,\n      observedName: obj.observed_name,\n      normalizedURI: obj.normalized_uri,\n    });\n  }\n\n  public serialize(): object {\n    return {\n      source: this.source,\n      confidence: this.confidence,\n      observed_name: this.observedName,\n      normalized_uri: this.normalizedURI,\n    };\n  }\n}\n","import { InternalID } from \"models/typing\";\n\nexport class GradeTonnage {\n  commodity: InternalID; // ID not URI\n  totalTonnage?: number;\n  totalGrade?: number;\n  totalContainedMetal?: number;\n\n  public constructor({ commodity, totalTonnage, totalGrade, totalContainedMetal }: { commodity: InternalID; totalTonnage?: number; totalGrade?: number; totalContainedMetal?: number }) {\n    this.commodity = commodity;\n    this.totalTonnage = totalTonnage;\n    this.totalGrade = totalGrade;\n    this.totalContainedMetal = totalContainedMetal;\n  }\n\n  public clone(): GradeTonnage {\n    return new GradeTonnage({\n      commodity: this.commodity,\n      totalTonnage: this.totalTonnage,\n      totalGrade: this.totalGrade,\n      totalContainedMetal: this.totalContainedMetal,\n    });\n  }\n\n  public static deserialize(obj: any): GradeTonnage {\n    return new GradeTonnage({\n      commodity: obj.commodity,\n      totalTonnage: obj.total_tonnage,\n      totalGrade: obj.total_grade,\n      totalContainedMetal: obj.total_contained_metal,\n    });\n  }\n}\n","export class Reference {\n  document: Document;\n  comment: string;\n  property?: string;\n  // pageInfo: PageInfo[];\n\n  public constructor({\n    document,\n    comment,\n    property,\n  }: {\n    document: Document;\n    comment: string;\n    property?: string;\n    // pageInfo: PageInfo[]\n  }) {\n    this.document = document;\n    this.comment = comment;\n    this.property = property;\n    // this.pageInfo = pageInfo;\n  }\n\n  public clone(): Reference {\n    return new Reference({\n      document: this.document.clone(),\n      comment: this.comment,\n      property: this.property,\n      // pageInfo: this.pageInfo\n    });\n  }\n\n  public static deserialize(obj: any): Reference {\n    obj = {\n      ...obj,\n      document: Document.deserialize(obj.document),\n    };\n    return new Reference(obj);\n  }\n\n  public serialize(): object {\n    return {\n      document: this.document.serialize(),\n      comment: this.comment,\n      property: this.property,\n      // pageInfo: this.pageInfo\n    };\n  }\n\n  public static normalizeProperty(property: \"name\" | \"location\" | \"depositType\" | \"grade\" | \"tonnage\"): string {\n    switch (property) {\n      case \"name\":\n        return \"http://www.w3.org/2000/01/rdf-schema#label\";\n      case \"location\":\n        return \"https://minmod.isi.edu/ontology/location\";\n      case \"depositType\":\n        return \"https://minmod.isi.edu/ontology/deposit_type\";\n      case \"grade\":\n        return \"https://minmod.isi.edu/ontology/grade\";\n      case \"tonnage\":\n        return \"https://minmod.isi.edu/ontology/ore\";\n      default:\n        return \"\";\n    }\n  }\n}\n\nexport class Document {\n  uri: string;\n  title?: string;\n\n  public constructor({ uri, title }: { uri: string; title?: string }) {\n    this.uri = uri;\n    this.title = title;\n  }\n\n  public clone(): Document {\n    return new Document({ uri: this.uri, title: this.title });\n  }\n  public static deserialize(obj: any): Document {\n    return new Document({\n      uri: obj.uri,\n      title: obj.title,\n    });\n  }\n  public serialize(): object {\n    return {\n      uri: this.uri,\n      title: this.title,\n    };\n  }\n}\n\n// export interface PageInfo {\n//   page: number;\n// }\n","import { IStore } from \"models\";\nimport { CandidateEntity } from \"./CandidateEntity\";\nimport { GradeTonnage } from \"./GradeTonnage\";\nimport { Reference } from \"./Reference\";\n\nexport class MineralInventory {\n  category: CandidateEntity[];\n  commodity: CandidateEntity;\n  grade?: Measure;\n  ore?: Measure;\n  reference: Reference;\n\n  public constructor({ category, commodity, grade, ore, reference }: { category: CandidateEntity[]; commodity: CandidateEntity; grade?: Measure; ore?: Measure; reference: Reference }) {\n    this.category = category;\n    this.commodity = commodity;\n    this.grade = grade;\n    this.ore = ore;\n    this.reference = reference;\n  }\n\n  public static fromGradeTonnage(stores: IStore, createdBy: string, gradeTonnage: GradeTonnage, reference: Reference): MineralInventory {\n    const commodity = stores.commodityStore.get(gradeTonnage.commodity)!;\n\n    return new MineralInventory({\n      category: [\"Inferred\", \"Indicated\", \"Measured\"].map(\n        (name) => new CandidateEntity({ source: createdBy, confidence: 1.0, observedName: name, normalizedURI: \"https://minmod.isi.edu/resource/\" + name })\n      ),\n      commodity: new CandidateEntity({\n        source: createdBy,\n        confidence: 1.0,\n        observedName: commodity.name,\n        normalizedURI: commodity.uri,\n      }),\n      grade:\n        gradeTonnage.totalGrade === undefined\n          ? undefined\n          : new Measure({\n              value: gradeTonnage.totalGrade,\n              unit: new CandidateEntity({\n                source: createdBy,\n                confidence: 1.0,\n                observedName: \"%\",\n                normalizedURI: \"https://minmod.isi.edu/resource/Q201\",\n              }),\n            }),\n      ore:\n        gradeTonnage.totalTonnage === undefined\n          ? undefined\n          : new Measure({\n              value: gradeTonnage.totalTonnage,\n              unit: new CandidateEntity({\n                source: createdBy,\n                confidence: 1.0,\n                observedName: \"%\",\n                normalizedURI: \"https://minmod.isi.edu/resource/Q202\",\n              }),\n            }),\n      reference: reference,\n    });\n  }\n\n  public static deserialize(obj: any): MineralInventory {\n    return new MineralInventory({\n      category: obj.category === undefined ? [] : obj.category.map(CandidateEntity.deserialize),\n      commodity: CandidateEntity.deserialize(obj.commodity),\n      grade: obj.grade === undefined ? undefined : Measure.deserialize(obj.grade),\n      ore: obj.ore === undefined ? undefined : Measure.deserialize(obj.ore),\n      reference: Reference.deserialize(obj.reference),\n    });\n  }\n}\n\nexport class Measure {\n  value: number;\n  unit: CandidateEntity;\n\n  public constructor({ value, unit }: { value: number; unit: CandidateEntity }) {\n    this.value = value;\n    this.unit = unit;\n  }\n\n  public static deserialize(obj: any): Measure {\n    return new Measure({\n      value: obj.value,\n      unit: CandidateEntity.deserialize(obj.unit),\n    });\n  }\n}\n","import { CandidateEntity } from \"./CandidateEntity\";\nimport { GradeTonnage } from \"./GradeTonnage\";\nimport { LocationInfo } from \"./LocationInfo\";\nimport { Reference, Document } from \"./Reference\";\nimport { DedupMineralSite, DedupMineralSiteLocation } from \"models/dedupMineralSite\";\nimport { DepositTypeStore } from \"models/depositType\";\nimport { StateOrProvinceStore } from \"models/stateOrProvince\";\nimport { CountryStore } from \"models/country\";\nimport { MineralInventory } from \"./MineralInventory\";\nimport { IStore } from \"models\";\nimport { InternalID } from \"models/typing\";\n\nexport type EditableField = \"name\" | \"location\" | \"depositType\" | \"grade\" | \"tonnage\";\nexport type FieldEdit =\n  | { field: \"name\"; value: string }\n  | { field: \"location\"; value: string }\n  | { field: \"depositType\"; observedName: string; normalizedURI: string }\n  | {\n      field: \"grade\";\n      value: number;\n      commodity: string;\n    }\n  | { field: \"tonnage\"; value: number; commodity: string };\n\nexport type MineralSiteConstructorArgs = {\n  id: InternalID;\n  recordId: string;\n  sourceId: string;\n  dedupSiteURI: string;\n  createdBy: string[];\n  name: string;\n  locationInfo: LocationInfo;\n  depositTypeCandidate: CandidateEntity[];\n  reference: Reference[];\n  sameAs: string[];\n  gradeTonnage: { [commodity: string]: GradeTonnage };\n  mineralInventory: MineralInventory[];\n};\n\nexport class MineralSite {\n  id: InternalID;\n  sourceId: string;\n  recordId: string;\n  dedupSiteURI: string;\n  createdBy: string[];\n  name: string;\n  locationInfo: LocationInfo;\n  depositTypeCandidate: CandidateEntity[];\n  reference: Reference[];\n  sameAs: string[];\n  gradeTonnage: { [commodity: string]: GradeTonnage };\n  mineralInventory: MineralInventory[];\n\n  public constructor({ id, recordId, sourceId, createdBy, name, locationInfo, depositTypeCandidate, reference, sameAs, gradeTonnage, dedupSiteURI, mineralInventory }: MineralSiteConstructorArgs) {\n    this.id = id;\n    this.recordId = recordId;\n    this.sourceId = sourceId;\n    this.dedupSiteURI = dedupSiteURI;\n    this.createdBy = createdBy;\n    this.name = name;\n    this.locationInfo = locationInfo;\n    this.depositTypeCandidate = depositTypeCandidate;\n    this.reference = reference;\n    this.sameAs = sameAs;\n    this.gradeTonnage = gradeTonnage;\n    this.mineralInventory = mineralInventory;\n  }\n\n  get uri(): string {\n    return `https://minmod.isi.edu/resource/${this.id}`;\n  }\n\n  getReferencedDocuments(): { [uri: string]: Document } {\n    const docs: { [uri: string]: Document } = {};\n    for (const ref of this.reference) {\n      docs[ref.document.uri] = ref.document;\n    }\n    return docs;\n  }\n\n  getFirstReferencedDocument(): Document {\n    return this.reference[0].document;\n  }\n\n  updateField(stores: IStore, edit: FieldEdit, reference: Reference) {\n    switch (edit.field) {\n      case \"name\":\n        this.name = edit.value;\n        break;\n      case \"location\":\n        this.locationInfo.location = edit.value;\n        break;\n      case \"depositType\":\n        this.depositTypeCandidate = [\n          new CandidateEntity({\n            source: this.createdBy[0], // this works because createdBy is a single item array for experts\n            confidence: 1.0,\n            normalizedURI: edit.normalizedURI,\n            observedName: edit.observedName,\n          }),\n        ];\n        break;\n      case \"grade\":\n        if (this.gradeTonnage[edit.commodity] === undefined) {\n          this.gradeTonnage[edit.commodity] = new GradeTonnage({\n            commodity: edit.commodity,\n            totalGrade: edit.value,\n            totalTonnage: 0.00001,\n          });\n        } else {\n          this.gradeTonnage[edit.commodity].totalGrade = edit.value;\n        }\n\n        this.mineralInventory = [MineralInventory.fromGradeTonnage(stores, this.createdBy[0], this.gradeTonnage[edit.commodity], reference)];\n        break;\n      case \"tonnage\":\n        if (this.gradeTonnage[edit.commodity] === undefined) {\n          this.gradeTonnage[edit.commodity] = new GradeTonnage({\n            commodity: edit.commodity,\n            totalTonnage: edit.value,\n            totalGrade: 0.00001,\n          });\n        } else {\n          this.gradeTonnage[edit.commodity].totalTonnage = edit.value;\n        }\n\n        this.mineralInventory = [MineralInventory.fromGradeTonnage(stores, this.createdBy[0], this.gradeTonnage[edit.commodity], reference)];\n        break;\n      default:\n        throw new Error(`Unknown edit: ${edit}`);\n    }\n\n    // TODO: fix me, we need to avoid duplicated reference\n    this.reference.push(reference);\n  }\n}\n\nexport class DraftCreateMineralSite extends MineralSite {\n  draftID: string;\n\n  constructor({ draftID, ...rest }: { draftID: string } & MineralSiteConstructorArgs) {\n    super(rest);\n    this.draftID = draftID;\n  }\n\n  public static fromMineralSite(\n    stores: { depositTypeStore: DepositTypeStore; stateOrProvinceStore: StateOrProvinceStore; countryStore: CountryStore },\n    dedupMineralSite: DedupMineralSite,\n    sites: MineralSite[],\n    username: string,\n    reference: Reference\n  ): DraftCreateMineralSite {\n    const baseSite = sites[0].id === dedupMineralSite.sites[0] ? sites[0] : sites.filter((site) => site.id === dedupMineralSite.sites[0])[0];\n    const createdBy = `https://minmod.isi.edu/users/${username}`;\n    const confidence = 1.0;\n\n    return new DraftCreateMineralSite({\n      draftID: `draft-${dedupMineralSite.id}`,\n      id: \"\", // backend does not care about uri as they will recalculate it\n      sourceId: DraftCreateMineralSite.updateSourceId(baseSite.sourceId, username),\n      recordId: baseSite.recordId,\n      dedupSiteURI: dedupMineralSite.uri,\n      createdBy: [createdBy],\n      name: dedupMineralSite.name,\n      locationInfo: (\n        dedupMineralSite.location ||\n        new DedupMineralSiteLocation({\n          country: [],\n          stateOrProvince: [],\n        })\n      )?.toLocationInfo(stores, createdBy, confidence),\n      depositTypeCandidate: dedupMineralSite.depositTypes.length > 0 ? [dedupMineralSite.getTop1DepositType()!.toCandidateEntity(stores)] : [],\n      reference: [reference],\n      sameAs: dedupMineralSite.sites,\n      gradeTonnage: {\n        [dedupMineralSite.gradeTonnage.commodity]: dedupMineralSite.gradeTonnage,\n      },\n      mineralInventory: [],\n    });\n  }\n\n  public static updateSourceId(sourceId: string, username: string): string {\n    const [sourceType, sourceIdent] = sourceId.split(\"::\", 2);\n    const url = new URL(sourceIdent);\n    url.searchParams.set(\"username\", username);\n    return `${sourceType}::${url.toString()}`;\n  }\n}\n\nexport class DraftUpdateMineralSite extends MineralSite {\n  isSaved: boolean = true;\n\n  updateField(stores: IStore, edit: FieldEdit, reference: Reference) {\n    super.updateField(stores, edit, reference);\n    this.isSaved = false;\n  }\n\n  markSaved() {\n    this.isSaved = true;\n  }\n\n  toModel(): MineralSite {\n    return new MineralSite(this);\n  }\n}\n","import { computed, makeObservable } from \"mobx\";\nimport { CandidateEntity } from \"./CandidateEntity\";\n\nexport class LocationInfo {\n  location?: string;\n  country: CandidateEntity[];\n  stateOrProvince: CandidateEntity[];\n  crs?: CandidateEntity;\n\n  public constructor({ country, stateOrProvince, location, crs }: { country: CandidateEntity[]; stateOrProvince: CandidateEntity[]; location?: string; crs?: CandidateEntity }) {\n    this.location = location;\n    this.country = country;\n    this.stateOrProvince = stateOrProvince;\n    this.crs = crs;\n  }\n\n  public static deserialize(obj: any) {\n    return new LocationInfo({\n      location: obj.location,\n      country: obj.country === undefined ? [] : obj.country.map(CandidateEntity.deserialize),\n      stateOrProvince: obj.state_or_province === undefined ? [] : obj.state_or_province.map(CandidateEntity.deserialize),\n      crs: obj.crs === undefined ? undefined : CandidateEntity.deserialize(obj.crs),\n    });\n  }\n\n  public clone(): LocationInfo {\n    return new LocationInfo({\n      location: this.location,\n      country: this.country.map((c) => c.clone()),\n      stateOrProvince: this.stateOrProvince.map((s) => s.clone()),\n      crs: this.crs ? this.crs.clone() : undefined,\n    });\n  }\n}\n","import { SERVER } from \"env\";\nimport { CRUDStore, FetchResponse } from \"gena-app\";\nimport { MineralSite, DraftCreateMineralSite, DraftUpdateMineralSite } from \"./MineralSite\";\nimport { LocationInfo } from \"./LocationInfo\";\nimport { CandidateEntity } from \"./CandidateEntity\";\nimport { Reference } from \"./Reference\";\nimport { GradeTonnage } from \"./GradeTonnage\";\nimport { DedupMineralSite, DedupMineralSiteStore } from \"models/dedupMineralSite\";\nimport { MineralInventory } from \"./MineralInventory\";\n\nexport class MineralSiteStore extends CRUDStore<string, DraftCreateMineralSite, DraftUpdateMineralSite, MineralSite> {\n  dedupMineralSiteStore: DedupMineralSiteStore;\n\n  constructor(dedupMineralSiteStore: DedupMineralSiteStore) {\n    super(`${SERVER}/api/v1/mineral-sites`, undefined, false);\n    this.dedupMineralSiteStore = dedupMineralSiteStore;\n  }\n\n  async createAndUpdateDedup(commodity: string, draft: DraftCreateMineralSite, discardDraft: boolean = true): Promise<MineralSite> {\n    const record = await this.create(draft, discardDraft);\n    await this.dedupMineralSiteStore.forceFetchByURI(record.dedupSiteURI, commodity);\n    return record;\n  }\n\n  async updateAndUpdateDedup(commodity: string, draft: DraftUpdateMineralSite, discardDraft: boolean = true): Promise<MineralSite> {\n    const record = await this.update(draft, discardDraft);\n    await this.dedupMineralSiteStore.forceFetchByURI(record.dedupSiteURI, commodity);\n    return record;\n  }\n\n  public deserialize(record: any): MineralSite {\n    return new MineralSite({\n      id: record.id,\n      recordId: record.record_id,\n      sourceId: record.source_id,\n      dedupSiteURI: record.dedup_site_uri,\n      createdBy: record.created_by,\n      name: record.name,\n      locationInfo:\n        record.location_info !== undefined\n          ? LocationInfo.deserialize(record.location_info)\n          : new LocationInfo({\n              country: [],\n              stateOrProvince: [],\n            }),\n      depositTypeCandidate: (record.deposit_type_candidate || []).map(CandidateEntity.deserialize),\n      reference: record.reference.map(Reference.deserialize),\n      sameAs: record.same_as,\n      gradeTonnage: Object.fromEntries(\n        record.grade_tonnage.map((val: any) => {\n          const gt = GradeTonnage.deserialize(val);\n          return [gt.commodity, gt];\n        })\n      ),\n      mineralInventory: record.mineral_inventory.map(MineralInventory.deserialize),\n    });\n  }\n\n  public serializeRecord(record: DraftCreateMineralSite | DraftUpdateMineralSite): object {\n    // convert mineral site to the format that the server required to save the mineral site.\n    // TODO: validate for the location\n    const reference = record.reference.map((ref) => ref.serialize());\n    let mineralInventory = [];\n\n    for (const gt of Object.values(record.gradeTonnage)) {\n      console.log(\"@@@\", gt);\n      mineralInventory.push({\n        // TODO: fix me! find correct source\n        // TODO: get correct users\n        category: [\"Inferred\", \"Indicated\", \"Measured\"].map((cat) => ({\n          source: record.createdBy[0],\n          confidence: 1.0,\n          normalized_uri: `https://minmod.isi.edu/resource/${cat}`,\n        })),\n        commodity: {\n          source: record.createdBy[0],\n          confidence: 1.0,\n          normalized_uri: `https://minmod.isi.edu/resource/${gt.commodity}`,\n        },\n        ore: {\n          value: gt.totalTonnage,\n          unit: {\n            source: record.createdBy[0],\n            confidence: 1.0,\n            normalized_uri: \"https://minmod.isi.edu/resource/Q202\",\n          },\n        },\n        grade: {\n          value: gt.totalGrade,\n          unit: {\n            source: record.createdBy[0],\n            confidence: 1.0,\n            normalized_uri: \"https://minmod.isi.edu/resource/Q201\",\n          },\n        },\n        reference: reference[0],\n      });\n    }\n\n    return {\n      name: record.name,\n      record_id: record.recordId,\n      source_id: record.sourceId,\n      created_by: record.createdBy,\n      dedup_site_uri: record.dedupSiteURI,\n      location_info: {\n        country: record.locationInfo.country.map((country) => country.serialize()),\n        state_or_province: record.locationInfo.stateOrProvince.map((state_or_province) => state_or_province.serialize()),\n        crs: record.locationInfo.crs?.serialize(),\n        location: record.locationInfo.location,\n      },\n      deposit_type_candidate: record.depositTypeCandidate.map((depositTypeCandidate) => depositTypeCandidate.serialize()),\n      mineral_inventory: mineralInventory,\n      reference: reference,\n      same_as: record.sameAs,\n    };\n  }\n\n  protected normRemoteSuccessfulResponse(resp: any): FetchResponse {\n    return { items: Array.isArray(resp.data) ? resp.data : Object.values(resp.data), total: resp.total };\n  }\n}\n","import { CountryStore } from \"models/country\";\nimport { DepositTypeStore } from \"models/depositType\";\nimport { CandidateEntity, GradeTonnage, LocationInfo } from \"models/mineralSite\";\nimport { StateOrProvinceStore } from \"models/stateOrProvince\";\nimport { InternalID, IRI } from \"models/typing\";\n\nexport class DedupMineralSiteDepositType {\n  uri: IRI;\n  source: string;\n  confidence: number;\n\n  public constructor({ uri, source, confidence }: { uri: IRI; source: string; confidence: number }) {\n    this.uri = uri;\n    this.source = source;\n    this.confidence = confidence;\n  }\n\n  public toCandidateEntity(stores: { depositTypeStore: DepositTypeStore }): CandidateEntity {\n    return new CandidateEntity({\n      source: this.source,\n      confidence: this.confidence,\n      normalizedURI: this.uri,\n      observedName: stores.depositTypeStore.get(this.uri)?.name,\n    });\n  }\n}\n\nexport class DedupMineralSiteLocation {\n  lat?: number;\n  lon?: number;\n  country: IRI[];\n  stateOrProvince: IRI[];\n\n  public constructor({ lat, lon, country, stateOrProvince }: { lat?: number; lon?: number; country: IRI[]; stateOrProvince: IRI[] }) {\n    this.lat = lat;\n    this.lon = lon;\n    this.country = country;\n    this.stateOrProvince = stateOrProvince;\n  }\n\n  public static deserialize(record: any): DedupMineralSiteLocation {\n    return new DedupMineralSiteLocation({\n      lat: record.lat,\n      lon: record.lon,\n      country: record.country || [],\n      stateOrProvince: record.state_or_province || [],\n    });\n  }\n\n  public toLocationInfo(\n    stores: {\n      stateOrProvinceStore: StateOrProvinceStore;\n      countryStore: CountryStore;\n    },\n    source: string,\n    confidence: number = 1.0\n  ) {\n    let loc = undefined;\n    if (this.lat !== undefined && this.lon !== undefined) {\n      loc = `POINT (${this.lon} ${this.lat})`;\n    }\n\n    return new LocationInfo({\n      location: loc,\n      crs: new CandidateEntity({\n        source,\n        confidence,\n        normalizedURI: \"https://minmod.isi.edu/resource/Q701\",\n        observedName: \"EPSG:4326\",\n      }),\n      country: this.country.map((country) => {\n        return new CandidateEntity({\n          source,\n          confidence,\n          normalizedURI: country,\n          observedName: stores.countryStore.get(country)?.name,\n        });\n      }),\n      stateOrProvince: this.stateOrProvince.map((stateOrProvince) => {\n        return new CandidateEntity({\n          source,\n          confidence,\n          normalizedURI: stateOrProvince,\n          observedName: stores.stateOrProvinceStore.get(stateOrProvince)?.name,\n        });\n      }),\n    });\n  }\n}\n\nexport class DedupMineralSite {\n  id: InternalID;\n  uri: IRI;\n  name: string;\n  type: string;\n  rank: string;\n  sites: IRI[];\n  depositTypes: DedupMineralSiteDepositType[];\n  location?: DedupMineralSiteLocation;\n  gradeTonnage: GradeTonnage;\n\n  public constructor({\n    id,\n    uri,\n    name,\n    type,\n    rank,\n    sites,\n    depositTypes,\n    location,\n    gradeTonnage,\n  }: {\n    id: InternalID;\n    uri: IRI;\n    name: string;\n    type: string;\n    rank: string;\n    sites: string[];\n    depositTypes: DedupMineralSiteDepositType[];\n    location?: DedupMineralSiteLocation;\n    gradeTonnage: GradeTonnage;\n  }) {\n    this.id = id;\n    this.uri = uri;\n    this.name = name;\n    this.type = type;\n    this.rank = rank;\n    this.sites = sites;\n    this.depositTypes = depositTypes;\n    this.location = location;\n    this.gradeTonnage = gradeTonnage;\n  }\n\n  get commodity(): string {\n    return this.gradeTonnage.commodity;\n  }\n\n  public static getId(uri: string): string {\n    return uri.substring(uri.lastIndexOf(\"/\") + 1);\n  }\n\n  public static deserialize(record: any): DedupMineralSite {\n    return new DedupMineralSite({\n      id: record.id,\n      uri: `https://minmod.isi.edu/resource/${record.id}`,\n      name: record.name,\n      type: record.type,\n      rank: record.rank,\n      sites: record.sites,\n      depositTypes: record.deposit_types.map((depositType: any) => new DedupMineralSiteDepositType(depositType)),\n      location: record.location !== undefined ? DedupMineralSiteLocation.deserialize(record.location) : undefined,\n      gradeTonnage: GradeTonnage.deserialize(record.grade_tonnage),\n    });\n  }\n\n  public getTop1DepositType(): DedupMineralSiteDepositType | undefined {\n    return this.depositTypes[0];\n  }\n}\n","import { RStore, FetchResponse, FetchResult, SingleKeyIndex } from \"gena-app\";\nimport { SERVER } from \"../../env\";\nimport { Commodity } from \"models/commodity\";\nimport { DedupMineralSite, DedupMineralSiteDepositType, DedupMineralSiteLocation } from \"./DedupMineralSite\";\nimport axios from \"axios\";\nimport { action, makeObservable, runInAction } from \"mobx\";\nimport { NamespaceManager } from \"models/Namespace\";\nimport { GradeTonnage } from \"models/mineralSite\";\nimport { InternalID } from \"models/typing\";\n\nexport class DedupMineralSiteStore extends RStore<string, DedupMineralSite> {\n  ns: NamespaceManager;\n\n  constructor(ns: NamespaceManager) {\n    super(`${SERVER}/api/v1/dedup-mineral-sites`, undefined, false, [new SingleKeyIndex(\"commodity\", \"id\")]);\n    this.ns = ns;\n\n    makeObservable(this, {\n      forceFetchByURI: action,\n      deleteByIds: action,\n      replaceSites: action,\n    });\n  }\n\n  get commodity2ids() {\n    return this.indices[0] as SingleKeyIndex<string, string, DedupMineralSite>;\n  }\n\n  /**\n   * Delete dedup mineral sites by their Ids\n   * @param ids\n   */\n  deleteByIds(ids: InternalID[]): void {\n    this.state.value = \"updating\";\n    for (const id of ids) {\n      const record = this.records.get(id);\n      if (record !== undefined && record !== null) {\n        this.deindex(record);\n        this.records.delete(id);\n      }\n    }\n    this.state.value = \"updated\";\n  }\n\n  /**\n   * Replace given dedup sites with new sites\n   *\n   * @param prevIds previous sites to delete\n   * @param newIds new sites to add\n   */\n  async replaceSites(prevIds: InternalID[], newIds: InternalID[], commodity: Object): Promise<void> {\n    this.deleteByIds(prevIds);\n    await this.fetchByIds(newIds, true, { commodity });\n  }\n\n  async forceFetchByURI(uri: string, commodity: string): Promise<DedupMineralSite | undefined> {\n    const id = DedupMineralSite.getId(uri);\n    try {\n      this.state.value = \"updating\";\n\n      let resp = await axios.get(`${this.remoteURL}/${id}`, {\n        params: { commodity },\n      });\n\n      return runInAction(() => {\n        let record = this.deserialize(resp.data);\n        this.records.set(record.id, record);\n        this.index(record);\n        this.state.value = \"updated\";\n\n        return this.records.get(record.id)!;\n      });\n    } catch (error: any) {\n      if (error.response && error.response.status === 404) {\n        // entity does not exist\n        runInAction(() => {\n          this.records.set(id, null);\n          this.state.value = \"updated\";\n        });\n        return undefined;\n      }\n\n      runInAction(() => {\n        this.state.value = \"error\";\n      });\n      throw error;\n    }\n  }\n\n  async fetchByCommodity(commodity: Commodity): Promise<FetchResult<DedupMineralSite>> {\n    if (!this.refetch && this.commodity2ids.index.has(commodity.id)) {\n      return this.getByCommodity(commodity);\n    }\n    return await this.fetch({\n      conditions: { commodity: commodity.id },\n    });\n  }\n\n  public getByCommodity(commodity: Commodity): FetchResult<DedupMineralSite> {\n    if (!this.commodity2ids.index.has(commodity.id)) {\n      return { records: [], total: 0 };\n    }\n\n    const records = [];\n    for (const id of this.commodity2ids.index.get(commodity.id)!) {\n      records.push(this.records.get(id)!);\n    }\n    return { records, total: records.length };\n  }\n\n  public deserialize(record: any): DedupMineralSite {\n    const MR = this.ns.MR;\n\n    return new DedupMineralSite({\n      id: record.id,\n      uri: MR.getURI(record.id),\n      name: record.name,\n      type: record.type,\n      rank: record.rank,\n      sites: record.sites,\n      depositTypes: record.deposit_types.map(\n        (depositType: any) =>\n          new DedupMineralSiteDepositType({\n            uri: MR.getURI(depositType.id),\n            source: depositType.source,\n            confidence: depositType.confidence,\n          })\n      ),\n      location:\n        record.location !== undefined\n          ? new DedupMineralSiteLocation({\n              lat: record.location.lat,\n              lon: record.location.lon,\n              country: (record.location.country || []).map((country: string) => MR.getURI(country)),\n              stateOrProvince: (record.location.state_or_province || []).map((sop: string) => MR.getURI(sop)),\n            })\n          : undefined,\n      gradeTonnage: GradeTonnage.deserialize(record.grade_tonnage),\n    });\n  }\n\n  async updateSameAsGroup(groups: { sites: InternalID[] }[]): Promise<InternalID[]> {\n    const resp = await axios.post(\"/api/v1/same-as\", groups);\n    return resp.data.map((dedupSite: any) => dedupSite.id);\n  }\n\n  protected normRemoteSuccessfulResponse(resp: any): FetchResponse {\n    return { items: Array.isArray(resp.data) ? resp.data : Object.values(resp.data), total: resp.total };\n  }\n\n  /**\n   * Remove a record (by id) from your indexes\n   */\n  protected deindex(record: DedupMineralSite): void {\n    for (const index of this.indices) {\n      index.remove(record);\n    }\n  }\n}\n","import { InternalID, IRI } from \"./typing\";\n\nexport class BindedNamespace {\n  prefix: string;\n  namespace: string;\n\n  constructor(prefix: string, namespace: string) {\n    this.prefix = prefix;\n    this.namespace = namespace;\n  }\n\n  getURI(id: InternalID): IRI {\n    return `${this.namespace}${id}`;\n  }\n}\n\nexport class NamespaceManager {\n  MR: BindedNamespace = new BindedNamespace(\"mr\", \"https://minmod.isi.edu/resource/\");\n  MO: BindedNamespace = new BindedNamespace(\"mo\", \"https://minmod.isi.edu/ontology/\");\n  MD: BindedNamespace = new BindedNamespace(\"md\", \"https://minmod.isi.edu/ontology-derived/\");\n}\n","import React, { createContext } from \"react\";\nimport { message } from \"antd\";\nimport { registerDefaultAxiosErrorHandler } from \"gena-app\";\n\nimport { toJS } from \"mobx\";\nimport { User, UserStore } from \"./user\";\nimport { Commodity, CommodityStore } from \"./commodity\";\nimport { DepositType, DepositTypeStore } from \"./depositType\";\nimport { Country, CountryStore } from \"./country\";\nimport { StateOrProvince, StateOrProvinceStore } from \"./stateOrProvince\";\nimport { DedupMineralSite, DedupMineralSiteStore } from \"./dedupMineralSite\";\nimport { FieldEdit, EditableField, Reference, Document, GradeTonnage, CandidateEntity, DraftCreateMineralSite, DraftUpdateMineralSite, MineralSite, MineralSiteStore } from \"./mineralSite\";\nimport { NamespaceManager, BindedNamespace } from \"./Namespace\";\n\nconst namespaceManager = new NamespaceManager();\nconst dedupMineralSiteStore = new DedupMineralSiteStore(namespaceManager);\n\nexport const stores = {\n  userStore: new UserStore(),\n  commodityStore: new CommodityStore(),\n  dedupMineralSiteStore,\n  mineralSiteStore: new MineralSiteStore(dedupMineralSiteStore),\n  depositTypeStore: new DepositTypeStore(),\n  stateOrProvinceStore: new StateOrProvinceStore(),\n  countryStore: new CountryStore(),\n};\n\nregisterDefaultAxiosErrorHandler((error) => {\n  message.error(\"Error while talking with the server.\", 5);\n});\n\n(window as any)._stores = stores;\n(window as any).toJS = toJS;\nexport type IStore = Readonly<typeof stores>;\n\n/** Init the stores with essential information (e.g., loading the ui settings) needed to run the app */\nexport function initStores(): Promise<any> {\n  return Promise.resolve();\n}\n\nexport function initNonCriticalStores(): Promise<any> {\n  return Promise.all([stores.depositTypeStore.fetchAll(), stores.countryStore.fetchAll(), stores.stateOrProvinceStore.fetchAll()]);\n}\n\nexport const StoreContext = createContext<IStore>(stores);\n\nexport function useStores(): IStore {\n  return React.useContext(StoreContext);\n}\n\nexport { Document, DedupMineralSite, MineralSite, Reference, GradeTonnage, CandidateEntity, DraftCreateMineralSite, DraftUpdateMineralSite, BindedNamespace, NamespaceManager };\nexport type { FieldEdit, EditableField, Commodity, User, DepositType, Country, StateOrProvince };\n","import { ConsoleSqlOutlined } from \"@ant-design/icons\";\nimport { Select, Space, Typography } from \"antd\";\nimport _ from \"lodash\";\nimport { useStores, Commodity, IStore } from \"models\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport { useLocation } from \"react-router\";\nimport { routes } from \"routes\";\n\ninterface SearchBarProps {\n  searchArgs: SearchArgs;\n  setSearchArgs: (args: SearchArgs) => void;\n}\n\ninterface SearchArgs {\n  commodity?: string;\n}\n\ninterface NormSearchArgs {\n  commodity?: Commodity;\n}\n\nexport function useSearchArgs2(): [SearchArgs, NormSearchArgs, (newArgs: SearchArgs) => void] {\n  const { commodityStore } = useStores();\n  const queryParams = routes.home.useQueryParams();\n  const location = useLocation();\n\n  const [args, setArgs] = useState<SearchArgs>({\n    commodity: undefined,\n  });\n\n  console.log(\"call useSearchArgs\", args);\n\n  const updateSearchArgs = (newArgs: SearchArgs) => {\n    console.log(\"[real update] update search args\", newArgs, routes.home.getURL({ commodity: newArgs.commodity }));\n    setArgs(newArgs);\n    routes.home.path({ commodity: newArgs.commodity }).open();\n    // window._routeAPIs.history.push(\"/?commodity=Lithium\");\n  };\n\n  // sync with queries in the URL\n  useEffect(() => {\n    const inv = () => {\n      const newArgs = {\n        commodity: queryParams?.commodity,\n      };\n\n      if (newArgs.commodity !== undefined) {\n        const commodity = commodityStore.getByName(newArgs.commodity);\n        console.log(\"check commodity\", newArgs.commodity, commodity);\n        if (commodity === null) {\n          // does not exist\n          newArgs.commodity = undefined;\n        }\n      }\n\n      console.log(\"[useEffect] update search args\", \"new=\", newArgs, \"old=\", args, \"query=\", queryParams);\n      console.log(\"location\", location, \"search\", location.search);\n      if (!_.isEqual(newArgs, args)) {\n        updateSearchArgs(newArgs);\n      }\n    };\n    // inv();\n    setTimeout(inv, 1000);\n  }, [commodityStore.records.size, queryParams?.commodity]);\n\n  const normArgs: NormSearchArgs = useMemo(() => {\n    if (args.commodity === undefined) {\n      return {\n        commodity: undefined,\n      };\n    }\n    const commodity = commodityStore.getByName(args.commodity);\n    return {\n      commodity: commodity === null ? undefined : commodity,\n    };\n  }, [commodityStore.records.size, args.commodity]);\n\n  return [args, normArgs, updateSearchArgs];\n}\n\nexport function useSearchArgs(): [SearchArgs, NormSearchArgs, (newArgs: SearchArgs) => void] {\n  const { commodityStore } = useStores();\n  const [args, setArgs] = useState<SearchArgs>({\n    commodity: undefined,\n  });\n\n  const updateSearchArgs = (newArgs: SearchArgs) => {\n    setArgs(newArgs);\n  };\n\n  const normArgs: NormSearchArgs = useMemo(() => {\n    if (args.commodity === undefined) {\n      return {\n        commodity: undefined,\n      };\n    }\n    const commodity = commodityStore.getByName(args.commodity);\n    return {\n      commodity: commodity === null ? undefined : commodity,\n    };\n  }, [commodityStore.records.size, args.commodity]);\n\n  return [args, normArgs, updateSearchArgs];\n}\n\nexport const SearchBar: React.FC<SearchBarProps> = ({ searchArgs, setSearchArgs }) => {\n  const { commodityStore } = useStores();\n  const [options, setOptions] = useState<{ value: string; label: string }[]>([]);\n\n  useEffect(() => {\n    commodityStore.fetchCriticalCommotities().then((commodities) => {\n      setOptions(\n        commodities.map((comm) => ({\n          value: comm.id,\n          label: comm.name,\n        }))\n      );\n    });\n  }, [commodityStore]);\n\n  const onSelect = (value: string) => {\n    setSearchArgs({ commodity: commodityStore.get(value)!.name });\n  };\n\n  return (\n    <Space>\n      <Typography.Text>\n        Commodity<span style={{ color: \"red\" }}>*</span>:\n      </Typography.Text>\n      <Select style={{ width: 200 }} value={searchArgs.commodity} placeholder=\"Select a commodity\" showSearch={true} optionFilterProp=\"label\" onChange={onSelect} options={options} />\n    </Space>\n  );\n};\n","import { Typography } from \"antd\";\nimport { CandidateEntity } from \"models\";\n\ninterface CanEntCompProps {\n  entity?: CandidateEntity;\n}\n\ninterface ListCanEntProps {\n  entities: CandidateEntity[];\n}\n\nexport const CanEntComponent: React.FC<CanEntCompProps> = ({ entity }: CanEntCompProps) => {\n  if (entity === undefined) {\n    return <span>-</span>;\n  }\n\n  const name = entity.observedName === undefined ? \" \" : entity.observedName;\n  if (entity.normalizedURI !== undefined) {\n    return (\n      <Typography.Link href={entity.normalizedURI} target=\"_blank\">\n        {name}\n      </Typography.Link>\n    );\n  }\n\n  return <span>{name}</span>;\n};\n\nexport const ListCanEntComponent = ({ entities }: ListCanEntProps) => {\n  const comp = [];\n\n  if (entities.length > 0) {\n    comp.push(<CanEntComponent key={0} entity={entities[0]} />);\n  }\n\n  for (let i = 1; i < entities.length; i++) {\n    comp.push(<span>&nbsp;-&nbsp;</span>);\n    comp.push(<CanEntComponent key={i} entity={entities[i]} />);\n  }\n\n  return <>{comp}</>;\n};\n","export function join<T>(arr: T[], separator: (index: number) => T): T[] {\n  if (arr.length === 0) {\n    return [];\n  }\n\n  const result: T[] = [arr[0]];\n  for (let i = 1; i < arr.length; i++) {\n    result.push(separator(i));\n    result.push(arr[i]);\n  }\n  return result;\n}\n","import { Dropdown, Input, MenuProps, Space } from \"antd\";\nimport { DownOutlined, SmileOutlined, UserOutlined, CloseCircleOutlined } from \"@ant-design/icons\";\nimport { useState } from \"react\";\n\nexport interface EditableSelectOption {\n  key: string;\n  label: string;\n}\n\nexport interface EditableSelectProps {\n  value?: string;\n  onChange?: (value: string) => void;\n  onProvenanceChange: (key: string | undefined) => void;\n  options: EditableSelectOption[];\n}\n\n/**\n * First time, it shows the dropdown with predefined options.\n *\n * User can select one of the predefined options, but when they click again, the dropdown\n * won't show up. User has a button to clean up the value. When they do that, the dropdown will\n * show up again.\n *\n * When user selects \"Enter your own\", the dropdown will disappear and an input field will show up.\n *\n * @param props\n * @returns\n */\nexport const EditableSelect: React.FC<EditableSelectProps> = (props) => {\n  const [selectingValue, setSelectingValue] = useState(false);\n  const items: MenuProps[\"items\"] = props.options.map((option) => ({\n    key: option.key,\n    label: option.label,\n    onClick: () => {\n      setSelectingValue(true);\n      if (props.onChange !== undefined) props.onChange(option.label);\n      props.onProvenanceChange(option.key);\n    },\n  }));\n  items.push({ type: \"divider\" });\n  items.push({\n    key: \"new\",\n    label: \"Enter your own\",\n    onClick: () => {\n      setSelectingValue(true);\n      props.onProvenanceChange(undefined);\n      if (props.onChange !== undefined) props.onChange(\"\");\n    },\n  });\n\n  if (selectingValue) {\n    return (\n      <Input\n        value={props.value}\n        onChange={(e) => (props.onChange !== undefined ? props.onChange(e.target.value) : undefined)}\n        placeholder={\"Enter your own\"}\n        suffix={\n          <CloseCircleOutlined\n            style={{ color: \"rgba(0,0,0,.25)\" }}\n            onClick={() => {\n              setSelectingValue(false);\n              if (props.onChange !== undefined) props.onChange(\"\");\n            }}\n          />\n        }\n      />\n    );\n  }\n\n  // Update React will solve the update state of unmounted component warnings\n  // https://github.com/ant-design/ant-design/issues/44994\n  return (\n    <Dropdown menu={{ items, style: { marginLeft: -12, marginTop: 8 } }}>\n      <Input value={props.value} placeholder={\"Select an option or enter your own\"} suffix={<DownOutlined style={{ color: \"rgba(0,0,0,.25)\" }} />} />\n    </Dropdown>\n  );\n};\n","import { Button, Checkbox, Form, Input, Modal, Select, Space } from \"antd\";\nimport { EditableSelect, EditableSelectOption } from \"components/EditableSelect\";\nimport _ from \"lodash\";\nimport { MineralSite, Reference, Document, FieldEdit, EditableField, useStores } from \"models\";\nimport { useMemo } from \"react\";\n\ninterface EditSiteFieldProps {\n  sites: MineralSite[];\n  currentSite?: MineralSite;\n  commodity: string;\n  editField?: EditableField;\n  onFinish: (change?: { edit: FieldEdit; reference: Reference }) => void;\n}\n\ntype FormFields = {\n  fieldValue: string;\n  refDocURI: string;\n  refComment: string;\n  refAppliedToAll: boolean;\n};\n\nexport const EditSiteField: React.FC<EditSiteFieldProps> = ({ currentSite, sites, editField, commodity, onFinish }) => {\n  const { depositTypeStore } = useStores();\n  const [form] = Form.useForm<FormFields>();\n\n  const title = useMemo(() => {\n    switch (editField) {\n      case \"name\":\n        return \"Name\";\n      case \"location\":\n        return \"Location\";\n      case \"depositType\":\n        return \"Deposit Type\";\n      case \"grade\":\n        return \"Grade (%)\";\n      case \"tonnage\":\n        return \"Tonnage (Mt)\";\n      default:\n        return \"\";\n    }\n  }, [editField]);\n\n  const setFieldProvenance = (key: string | undefined) => {\n    if (key !== undefined) {\n      const site = sites.filter((site) => site.id === key)[0];\n      // there can be multiple docs per site, we choose the first one and\n      // users can correct it.\n      form.setFieldValue(\"refDocURI\", site.getFirstReferencedDocument().uri);\n    } else {\n      form.setFieldValue(\"refDocURI\", \"\");\n    }\n  };\n\n  let fieldValueOptions: EditableSelectOption[] = [];\n  let fieldValueOptions2: { value: string; label: string }[] = [];\n  let initialValues = {\n    fieldValue: \"\",\n    refDocURI: \"\",\n    refComment: \"\",\n    refAppliedToAll: true,\n  };\n\n  if (editField === \"name\") {\n    fieldValueOptions = sites.map((site) => ({ key: site.id, label: site.name }));\n    if (currentSite !== undefined) {\n      initialValues.fieldValue = currentSite.name;\n      initialValues.refDocURI = currentSite.getFirstReferencedDocument().uri;\n      initialValues.refComment = currentSite.reference[0].comment;\n    }\n  } else if (editField === \"location\") {\n    fieldValueOptions = sites.filter((site) => site.locationInfo.location !== undefined).map((site) => ({ key: site.id, label: site.locationInfo.location! }));\n    if (currentSite !== undefined) {\n      initialValues.fieldValue = currentSite.locationInfo.location || \"\";\n      initialValues.refDocURI = currentSite.getFirstReferencedDocument().uri;\n      initialValues.refComment = currentSite.reference[0].comment;\n    }\n  } else if (editField === \"depositType\") {\n    fieldValueOptions2 = _.uniqBy(\n      sites.flatMap((site) => site.depositTypeCandidate).filter((deptype) => deptype.normalizedURI !== undefined),\n      \"normalizedURI\"\n    )\n      .sort((a, b) => a.confidence - b.confidence)\n      .map((type) => ({ value: type.normalizedURI!, label: depositTypeStore.getByURI(type.normalizedURI!)!.name }));\n\n    const predictedDepTypes = new Set(fieldValueOptions2.map((type) => type.value));\n    fieldValueOptions2 = fieldValueOptions2.concat(depositTypeStore.filter((type) => !predictedDepTypes.has(type.uri)).map((type) => ({ value: type.uri, label: type.name })));\n\n    if (currentSite !== undefined && currentSite.depositTypeCandidate.length > 0) {\n      initialValues.fieldValue = currentSite.depositTypeCandidate[0].normalizedURI!;\n      initialValues.refDocURI = currentSite.getFirstReferencedDocument().uri;\n      initialValues.refComment = currentSite.reference[0].comment;\n    }\n  }\n\n  const docs = _.uniqBy(\n    sites.flatMap((site) => Object.values(site.getReferencedDocuments()).map((doc) => ({ key: doc.uri, label: doc.title || doc.uri }))),\n    \"uri\"\n  );\n\n  const onSave = (values: any) => {\n    if (editField === undefined) return;\n    const val = form.getFieldsValue();\n    let edit;\n    if (editField === \"name\" || editField === \"location\") {\n      edit = { field: editField, value: val.fieldValue };\n    } else if (editField === \"depositType\") {\n      edit = { field: editField, observedName: depositTypeStore.getByURI(val.fieldValue)!.name, normalizedURI: val.fieldValue };\n    } else if (editField === \"grade\" || editField === \"tonnage\") {\n      edit = { field: editField, value: parseFloat(val.fieldValue), commodity };\n    } else {\n      throw new Error(`Unknown field ${editField}`);\n    }\n\n    onFinish({\n      edit,\n      reference: new Reference({\n        document: new Document({ uri: val.refDocURI }),\n        comment: val.refComment,\n        property: val.refAppliedToAll ? undefined : Reference.normalizeProperty(editField),\n      }),\n    });\n  };\n\n  let fieldValueComponent;\n  if (editField === \"grade\" || editField === \"tonnage\") {\n    fieldValueComponent = <Input type=\"number\" />;\n  } else if (editField === \"depositType\") {\n    fieldValueComponent = <Select showSearch={true} options={fieldValueOptions2} optionFilterProp=\"label\" />;\n  } else {\n    fieldValueComponent = <EditableSelect onProvenanceChange={setFieldProvenance} options={fieldValueOptions} />;\n  }\n\n  return (\n    <Modal title=\"Edit Mineral Site\" width=\"70%\" open={editField !== undefined} onCancel={() => onFinish()} footer={null}>\n      <Form form={form} onFinish={onSave} layout=\"vertical\" style={{ marginTop: 24, marginBottom: 24 }} requiredMark={true} initialValues={initialValues}>\n        <Form.Item<FormFields> name=\"fieldValue\" label={title} required={true} tooltip=\"This is a required field\" rules={[{ required: true, message: \"Value cannot be empty\" }]}>\n          {fieldValueComponent}\n        </Form.Item>\n        <Form.Item<FormFields> name=\"refDocURI\" label=\"Reference\" required={true} tooltip=\"This is a required field\" rules={[{ required: true, message: \"Document URL\" }]}>\n          <EditableSelect onProvenanceChange={() => {}} options={docs} />\n        </Form.Item>\n        <Form.Item<FormFields> name=\"refComment\" label=\"Comment\">\n          <Input.TextArea rows={3} />\n        </Form.Item>\n        <Form.Item<FormFields> name=\"refAppliedToAll\" valuePropName=\"checked\">\n          <Checkbox>This reference applies to all fields</Checkbox>\n        </Form.Item>\n        <Form.Item<FormFields>>\n          <Space>\n            <Button type=\"primary\" htmlType=\"submit\">\n              Save\n            </Button>\n            <Button htmlType=\"button\" onClick={() => onFinish()}>\n              Cancel\n            </Button>\n          </Space>\n        </Form.Item>\n      </Form>\n    </Modal>\n  );\n};\n","import { Button, Col, Flex, Row, Select, Space, Table, Typography, message, Checkbox } from \"antd\";\nimport { toJS } from \"mobx\";\nimport { observer } from \"mobx-react\";\nimport { useStores, Commodity, DedupMineralSite, MineralSite, CandidateEntity, Reference, DraftCreateMineralSite, FieldEdit, EditableField, DraftUpdateMineralSite } from \"models\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport { WithStyles, withStyles } from \"@material-ui/styles\";\nimport { CanEntComponent, ListCanEntComponent } from \"./CandidateEntity\";\nimport { join } from \"misc\";\nimport { EditOutlined } from \"@ant-design/icons\";\nimport { EditSiteField } from \"./EditSiteField\";\nimport { orange } from \"@ant-design/colors\";\nimport axios from \"axios\";\nconst css = {\n  table: {\n    \"& .ant-table\": {\n      margin: \"0px !important\",\n      border: \"1px solid #ccc\",\n    },\n  },\n  editButton: {\n    cursor: \"pointer\",\n  },\n  myEditedRow: {\n    backgroundColor: `${orange[1]} !important`,\n    \"& > td\": {\n      backgroundColor: `${orange[1]} !important`,\n    },\n  },\n};\n\ninterface EditDedupMineralSiteProps {\n  commodity: Commodity;\n  dedupSite: DedupMineralSite;\n}\n\nexport const EditDedupMineralSite = withStyles(css)(\n  observer(({ dedupSite, commodity, classes }: EditDedupMineralSiteProps & WithStyles<typeof css>) => {\n    const stores = useStores();\n    const { mineralSiteStore, userStore, dedupMineralSiteStore } = stores;\n    const [editField, setEditField] = useState<EditableField | undefined>(undefined);\n    const [selectedRows, setSelectedRows] = useState<Set<string>>(new Set());\n\n    const tmpLst: (MineralSite | null | undefined)[] = dedupSite.sites.map((id) => mineralSiteStore.get(id));\n    // no idea why typescript compiler incorrectly complains about the incorrect type\n    const fetchedSites = tmpLst.filter((site) => site !== undefined) as (MineralSite | null)[];\n    const sites = fetchedSites.filter((site) => site !== null) as MineralSite[];\n    const isLoading = mineralSiteStore.state.value === \"updating\" || fetchedSites.length !== dedupSite.sites.length;\n\n    const ungroupTogether = async () => {\n      const selectedSiteIds = Array.from(selectedRows);\n      const allSiteIds = sites.map((site) => site.id);\n      const unselectedSiteIds = allSiteIds.filter((id) => !selectedRows.has(id));\n\n      const newGroups = [{ sites: selectedSiteIds }, { sites: unselectedSiteIds }];\n      const newIds = await dedupMineralSiteStore.updateSameAsGroup(newGroups);\n\n      if (commodity && commodity.id) {\n        const commodityId = commodity.id;\n        await dedupMineralSiteStore.replaceSites([dedupSite.id], newIds, commodityId);\n        message.success(\"Ungrouping was successful!\");\n      }\n    };\n\n    const ungroupSeparately = async () => {\n      const selectedSiteIds = Array.from(selectedRows);\n      const allSiteIds = sites.map((site) => site.id);\n      const unselectedSiteIds = allSiteIds.filter((id) => !selectedRows.has(id));\n\n      const selectedPayload = selectedSiteIds.map((id) => ({ sites: [id] }));\n      const unselectedPayload = unselectedSiteIds.length > 0 ? [{ sites: unselectedSiteIds }] : [];\n      const createPayload = [...selectedPayload, ...unselectedPayload];\n\n      const newIds = await dedupMineralSiteStore.updateSameAsGroup(createPayload);\n\n      if (commodity && commodity.id) {\n        const commodityId = commodity.id;\n        await dedupMineralSiteStore.replaceSites([dedupSite.id], newIds, commodityId);\n        message.success(\"Ungrouping was successful!\");\n      }\n    };\n\n    const columns = useMemo(() => {\n      return [\n        {\n          title: \"Select\",\n          key: \"select\",\n          hidden: sites.length === 1,\n          render: (_: any, site: MineralSite) => (\n            <Checkbox\n              checked={selectedRows.has(site.id)}\n              onChange={(e) => {\n                const updatedRows = new Set(selectedRows);\n                if (e.target.checked) {\n                  updatedRows.add(site.id);\n                } else {\n                  updatedRows.delete(site.id);\n                }\n                setSelectedRows(updatedRows);\n              }}\n            />\n          ),\n        },\n        {\n          title: (\n            <Flex justify=\"space-between\">\n              <span>Name</span>\n              <EditOutlined className={classes.editButton} onClick={() => setEditField(\"name\")} />\n            </Flex>\n          ),\n          key: \"name\",\n          render: (_: any, site: MineralSite) => {\n            return (\n              <Typography.Link href={site.uri} target=\"_blank\">\n                {site.name}\n              </Typography.Link>\n            );\n          },\n        },\n        {\n          title: (\n            <Flex justify=\"space-between\">\n              <span>Location</span>\n              <EditOutlined className={classes.editButton} onClick={() => setEditField(\"location\")} />\n            </Flex>\n          ),\n          key: \"location\",\n          render: (_: any, site: MineralSite) => {\n            return (\n              <Typography.Text className=\"font-small\" ellipsis={true} style={{ maxWidth: 200 }}>\n                {site.locationInfo.location}\n              </Typography.Text>\n            );\n          },\n        },\n        {\n          title: \"CRS\",\n          key: \"crs\",\n          render: (_: any, site: MineralSite) => {\n            return <span>{site.locationInfo.crs?.observedName}</span>;\n          },\n        },\n        {\n          title: \"Country\",\n          key: \"country\",\n          render: (_: any, site: MineralSite) => {\n            return <ListCanEntComponent entities={site.locationInfo.country} />;\n          },\n        },\n        {\n          title: \"State/Province\",\n          key: \"state/province\",\n          render: (_: any, site: MineralSite) => {\n            return <ListCanEntComponent entities={site.locationInfo.stateOrProvince} />;\n          },\n        },\n        {\n          title: (\n            <Flex justify=\"space-between\">\n              <span>Dep. Type</span>\n              <EditOutlined className={classes.editButton} onClick={() => setEditField(\"depositType\")} />\n            </Flex>\n          ),\n          key: \"deposit-type\",\n          render: (_: any, site: MineralSite) => {\n            return <CanEntComponent entity={site.depositTypeCandidate[0]} />;\n          },\n        },\n        {\n          title: \"Dep. Confidence\",\n          key: \"dep-type-confidence\",\n          render: (_: any, site: MineralSite) => {\n            if (site.depositTypeCandidate.length === 0) {\n              return \"-\";\n            }\n            return site.depositTypeCandidate[0].confidence.toFixed(4);\n          },\n        },\n        {\n          title: (\n            <Flex justify=\"space-between\">\n              <span>Tonnage (Mt)</span>\n              <EditOutlined className={classes.editButton} onClick={() => setEditField(\"tonnage\")} />\n            </Flex>\n          ),\n          key: \"tonnage\",\n          render: (_: any, site: MineralSite) => {\n            const gradeTonnage = site.gradeTonnage[commodity.id];\n            if (gradeTonnage === undefined || gradeTonnage.totalTonnage === undefined) {\n              return \"-\";\n            }\n            return gradeTonnage.totalTonnage.toFixed(4);\n          },\n        },\n        {\n          title: (\n            <Flex justify=\"space-between\">\n              <span>Grade (%)</span>\n              <EditOutlined className={classes.editButton} onClick={() => setEditField(\"grade\")} />\n            </Flex>\n          ),\n          key: \"grade\",\n          render: (_: any, site: MineralSite) => {\n            const gradeTonnage = site.gradeTonnage[commodity.id];\n            if (gradeTonnage === undefined || gradeTonnage.totalGrade === undefined) {\n              return \"-\";\n            }\n            return gradeTonnage.totalGrade.toFixed(2);\n          },\n        },\n        {\n          title: \"Reference\",\n          key: \"reference\",\n          render: (_: any, site: MineralSite) => {\n            return <ReferenceComponent site={site} />;\n          },\n        },\n      ];\n    }, [commodity.id, sites.length, selectedRows, ungroupTogether]);\n\n    useEffect(() => {\n      mineralSiteStore.fetchByIds(dedupSite.sites);\n    }, [mineralSiteStore]);\n\n    const onEditFinish = (change?: { edit: FieldEdit; reference: Reference }) => {\n      if (change === undefined) {\n        setEditField(undefined);\n        return;\n      }\n\n      const currentUser = userStore.getCurrentUser()!;\n      const existingSite = sites.find((site) => site.createdBy.includes(currentUser.url));\n      let cb;\n      if (existingSite === undefined) {\n        const draftSite = DraftCreateMineralSite.fromMineralSite(stores, dedupSite, sites, currentUser.id, change.reference);\n        draftSite.updateField(stores, change.edit, change.reference);\n        cb = mineralSiteStore.createAndUpdateDedup(dedupSite.commodity, draftSite);\n      } else {\n        const draftSite = new DraftUpdateMineralSite(existingSite);\n        draftSite.updateField(stores, change.edit, change.reference);\n        cb = mineralSiteStore.updateAndUpdateDedup(dedupSite.commodity, draftSite);\n      }\n\n      cb.then(() => {\n        setEditField(undefined);\n      });\n    };\n\n    const currentSite = sites.find((site) => site.createdBy.includes(userStore.getCurrentUser()!.url));\n\n    let groupBtns = undefined;\n    if (selectedRows.size > 0 && sites.length > 1) {\n      const ungrpSepBtn = (\n        <Button key=\"separately\" type=\"primary\" onClick={ungroupSeparately}>\n          Ungroup Separately\n        </Button>\n      );\n      const ungrpTogBtn = (\n        <Button key=\"together\" type=\"primary\" onClick={ungroupTogether}>\n          Ungroup Together\n        </Button>\n      );\n      if (selectedRows.size === 1 || selectedRows.size === sites.length) {\n        groupBtns = [ungrpSepBtn];\n      } else {\n        groupBtns = [ungrpSepBtn, ungrpTogBtn];\n      }\n      groupBtns = <Space>{groupBtns}</Space>;\n    }\n\n    return (\n      <Flex vertical={true} gap=\"small\">\n        {groupBtns}\n        <Table<MineralSite>\n          className={classes.table}\n          bordered={true}\n          pagination={false}\n          size=\"small\"\n          rowKey=\"id\"\n          columns={columns}\n          dataSource={sites}\n          loading={isLoading}\n          rowClassName={(site) => {\n            return site.createdBy.includes(userStore.getCurrentUser()!.url) ? classes.myEditedRow : \"\";\n          }}\n        />\n        <EditSiteField key={editField} sites={sites} currentSite={currentSite} editField={editField} onFinish={onEditFinish} commodity={commodity.id} />\n      </Flex>\n    );\n  })\n) as React.FC<EditDedupMineralSiteProps>;\n\nconst ReferenceComponent: React.FC<{ site: MineralSite }> = ({ site }) => {\n  const docs = useMemo(() => {\n    return Object.values(site.getReferencedDocuments());\n  }, [site]);\n\n  return (\n    <Typography.Text ellipsis={true} style={{ maxWidth: 200 }}>\n      {join(\n        docs.map((doc) => (\n          <Typography.Link key={doc.uri} target=\"_blank\" href={doc.uri}>\n            {doc.title || doc.uri}\n          </Typography.Link>\n        )),\n        (index) => (\n          <span key={`sep-${index}`}>&nbsp;·&nbsp;</span>\n        )\n      )}\n    </Typography.Text>\n  );\n};\n","import { Typography } from \"antd\";\nimport { stores, useStores } from \"models\";\n\nexport interface EntityProps {\n  uri: string;\n  store: \"countryStore\" | \"commodityStore\" | \"depositTypeStore\" | \"stateOrProvinceStore\";\n}\n\nexport const Entity: React.FC<EntityProps> = ({ uri: uri, store }) => {\n  const db = useStores()[store];\n  const record = db.get(uri);\n\n  if (record === null) {\n    return (\n      <Typography.Link href={uri} target=\"_blank\">\n        Not found\n      </Typography.Link>\n    );\n  }\n\n  if (record === undefined) {\n    console.log({ store, db, uri, record });\n    return (\n      <Typography.Link href={uri} target=\"_blank\">\n        Loading...\n      </Typography.Link>\n    );\n  }\n\n  return (\n    <Typography.Link href={uri} target=\"_blank\">\n      {record.name}\n    </Typography.Link>\n  );\n};\n","import { DedupMineralSite, useStores } from \"models\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport { observer } from \"mobx-react\";\nimport { Commodity } from \"models/commodity\";\nimport { Alert, Button, Checkbox, Divider, Flex, Space, Spin, Table, Typography, message } from \"antd\";\nimport { FetchResult } from \"gena-app\";\nimport { EditOutlined, UngroupOutlined } from \"@ant-design/icons\";\nimport { EditDedupMineralSite } from \"./editDedupSite/EditDedupMineralSite\";\nimport { Entity } from \"components/Entity\";\nimport axios from \"axios\";\nimport { DepositTypeStore } from \"models/depositType\";\ninterface DedupMineralSiteTableProps {\n  commodity: Commodity | undefined;\n}\n\nconst emptyFetchResult = { records: [], total: 0 };\n\nexport const DedupMineralSiteTable: React.FC<DedupMineralSiteTableProps> = observer(({ commodity }) => {\n  const { dedupMineralSiteStore, countryStore, stateOrProvinceStore } = useStores();\n  const [editingDedupSite, setEditingDedupSite] = useState<string | undefined>(undefined);\n  const [selectedDedupSiteIds, setSelectedDedupSiteIds] = useState<Set<string>>(new Set());\n\n  const columns = useMemo(() => {\n    return [\n      {\n        title: \"G\",\n        key: \"select\",\n        render: (_: any, site: DedupMineralSite) => <Checkbox onChange={(e) => selectDedupSite(site, e.target.checked)} checked={selectedDedupSiteIds.has(site.id)} />,\n        sorter: (a: DedupMineralSite, b: DedupMineralSite) => a.sites.length - b.sites.length,\n      },\n      {\n        title: \"Name\",\n        dataIndex: \"name\",\n        key: \"name\",\n        render: (_: any, site: DedupMineralSite) => {\n          return (\n            <Typography.Link href={site.uri} target=\"_blank\">\n              {site.name || \"᠆\"}\n            </Typography.Link>\n          );\n        },\n        sorter: (a: DedupMineralSite, b: DedupMineralSite) => a.name.localeCompare(b.name),\n      },\n      {\n        title: \"Type\",\n        key: \"type\",\n        render: (_: any, site: DedupMineralSite) => {\n          return <span className=\"font-small\">{site.type}</span>;\n        },\n        sorter: (a: DedupMineralSite, b: DedupMineralSite) => a.type.localeCompare(b.type),\n      },\n      {\n        title: \"Rank\",\n        key: \"rank\",\n        render: (_: any, site: DedupMineralSite) => {\n          return <span className=\"font-small\">{site.rank}</span>;\n        },\n        sorter: (a: DedupMineralSite, b: DedupMineralSite) => a.rank.localeCompare(b.rank),\n      },\n      {\n        title: \"Location\",\n        key: \"location\",\n        render: (value: any, dedupSite: DedupMineralSite) => {\n          if (dedupSite.location !== undefined && dedupSite.location.lat !== undefined && dedupSite.location.lon !== undefined) {\n            return `${dedupSite.location.lat.toFixed(5)}, ${dedupSite.location.lon.toFixed(5)}`;\n          }\n          return \"᠆\";\n        },\n        sorter: (a: DedupMineralSite, b: DedupMineralSite) => {\n          const locA = a.location ? `${a.location.lat?.toFixed(3)},${a.location.lon?.toFixed(3)}` : \"\";\n          const locB = b.location ? `${b.location.lat?.toFixed(3)},${b.location.lon?.toFixed(3)}` : \"\";\n          return locA.localeCompare(locB);\n        },\n      },\n      {\n        title: \"Country\",\n        key: \"country\",\n        render: (_: any, site: DedupMineralSite) => {\n          if (site.location === undefined || site.location.country.length === 0) {\n            return \"᠆\";\n          }\n\n          return (\n            <Space split={<Divider type=\"vertical\" />}>\n              {site.location.country.map((country) => (\n                <Entity key={country} uri={country} store=\"countryStore\" />\n              ))}\n            </Space>\n          );\n        },\n        sorter: (a: DedupMineralSite, b: DedupMineralSite) => {\n          const countryA = a.location?.country.map((iri) => countryStore.getByURI(iri)!.name).join(\",\") || \"\";\n          const countryB = b.location?.country.map((iri) => countryStore.getByURI(iri)!.name).join(\",\") || \"\";\n          return countryA.localeCompare(countryB);\n        },\n      },\n      {\n        title: \"State/Province\",\n        key: \"state\",\n        render: (_: any, site: DedupMineralSite) => {\n          if (site.location === undefined || site.location.stateOrProvince.length === 0) {\n            return \"᠆\";\n          }\n\n          return (\n            <Space split={<Divider type=\"vertical\" />}>\n              {site.location.stateOrProvince.map((province) => (\n                <Entity key={province} uri={province} store=\"stateOrProvinceStore\" />\n              ))}\n            </Space>\n          );\n        },\n        sorter: (a: DedupMineralSite, b: DedupMineralSite) => {\n          const stateA = a.location?.stateOrProvince.map((iri) => stateOrProvinceStore.getByURI(iri)!.name).join(\",\") || \"\";\n          const stateB = b.location?.stateOrProvince.map((iri) => stateOrProvinceStore.getByURI(iri)!.name).join(\",\") || \"\";\n          return stateA.localeCompare(stateB);\n        },\n      },\n      {\n        title: \"Deposit Type\",\n        key: \"depositType\",\n        render: (_: any, site: DedupMineralSite) => {\n          const dt = site.getTop1DepositType();\n          if (dt === undefined) {\n            return \"᠆\";\n          }\n          return <Entity uri={dt.uri} store=\"depositTypeStore\" />;\n        },\n        // sorter: (a: DedupMineralSite, b: DedupMineralSite) => (a.getTop1DepositType()?.name || \"\").localeCompare(b.getTop1DepositType()?.name || \"\"),\n      },\n      {\n        title: \"Dep. Score\",\n        key: \"depositConfidence\",\n        render: (_: any, site: DedupMineralSite) => {\n          const dt = site.getTop1DepositType();\n          if (dt === undefined) {\n            return \"᠆\";\n          }\n          return dt.confidence.toFixed(4);\n        },\n      },\n      {\n        title: \"Tonnage (Mt)\",\n        dataIndex: \"totalTonnage\",\n        render: (_: any, site: DedupMineralSite) => {\n          if (site.gradeTonnage !== undefined && site.gradeTonnage.totalTonnage !== undefined) {\n            return site.gradeTonnage.totalTonnage.toFixed(4);\n          }\n          return \"᠆\";\n        },\n        sorter: (a: DedupMineralSite, b: DedupMineralSite) => {\n          const tonnageA = a.gradeTonnage?.totalTonnage || 0;\n          const tonnageB = b.gradeTonnage?.totalTonnage || 0;\n          return tonnageA - tonnageB;\n        },\n      },\n      {\n        title: \"Grade (%)\",\n        dataIndex: \"totalGrade\",\n        render: (_: any, site: DedupMineralSite) => {\n          if (site.gradeTonnage !== undefined && site.gradeTonnage.totalGrade !== undefined) {\n            return site.gradeTonnage.totalGrade.toFixed(2);\n          }\n          return \"᠆\";\n        },\n        sorter: (a: DedupMineralSite, b: DedupMineralSite) => {\n          const gradeA = a.gradeTonnage?.totalGrade || 0;\n          const gradeB = b.gradeTonnage?.totalGrade || 0;\n          return gradeA - gradeB;\n        },\n      },\n      {\n        title: \"Action\",\n        key: \"action\",\n        render: (_: any, site: DedupMineralSite) => {\n          return (\n            <Space>\n              <Button\n                color=\"primary\"\n                size=\"middle\"\n                icon={<EditOutlined />}\n                variant=\"filled\"\n                onClick={() => {\n                  if (site.id === editingDedupSite) {\n                    setEditingDedupSite(undefined);\n                  } else {\n                    setEditingDedupSite(site.id);\n                  }\n                }}\n              >\n                Edit\n              </Button>\n            </Space>\n          );\n        },\n      },\n    ];\n  }, [commodity?.id, countryStore, stateOrProvinceStore, selectedDedupSiteIds, editingDedupSite]);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      if (commodity !== undefined) {\n        await dedupMineralSiteStore.fetchByCommodity(commodity);\n      }\n    };\n    fetchData();\n  }, [commodity, dedupMineralSiteStore]);\n\n  const selectDedupSite = (site: DedupMineralSite, selectOrNot: boolean) => {\n    const newSelectedDedupSiteIds = new Set(selectedDedupSiteIds);\n    if (selectOrNot) {\n      newSelectedDedupSiteIds.add(site.id);\n    } else {\n      newSelectedDedupSiteIds.delete(site.id);\n    }\n    setSelectedDedupSiteIds(newSelectedDedupSiteIds);\n  };\n\n  const handleGroup = async () => {\n    const prevIds = Array.from(selectedDedupSiteIds);\n    const allSiteIds = Array.from(selectedDedupSiteIds).flatMap((dedupSiteId) => dedupMineralSiteStore.get(dedupSiteId)!.sites.map((siteUri) => DedupMineralSite.getId(siteUri)));\n\n    const newSiteGroups = [\n      {\n        sites: allSiteIds,\n      },\n    ];\n    const newIds = await dedupMineralSiteStore.updateSameAsGroup(newSiteGroups);\n\n    if (commodity && commodity.id) {\n      const commodityId = commodity.id;\n      message.success(\"Grouping was successful\", 3);\n      setSelectedDedupSiteIds(new Set());\n      await dedupMineralSiteStore.replaceSites(prevIds, newIds, commodityId);\n    }\n  };\n\n  const isLoading = dedupMineralSiteStore.state.value === \"updating\";\n  const dedupMineralSites = commodity === undefined || isLoading ? emptyFetchResult : dedupMineralSiteStore.getByCommodity(commodity);\n\n  return (\n    <>\n      {selectedDedupSiteIds.size > 0\n        ? [\n            <div>\n              <Button type=\"primary\" onClick={handleGroup} disabled={selectedDedupSiteIds.size === 1}>\n                Group selected sites\n              </Button>\n            </div>,\n            <Table<DedupMineralSite>\n              bordered={true}\n              size=\"small\"\n              rowKey=\"id\"\n              pagination={false}\n              columns={[\n                {\n                  title: \"Select\",\n                  key: \"group\",\n                  render: (_: any, site: DedupMineralSite) => <Checkbox type=\"primary\" checked={true} onClick={() => selectDedupSite(site, false)} />,\n                },\n                ...columns.slice(1),\n              ]}\n              dataSource={Array.from(selectedDedupSiteIds).map((id) => dedupMineralSiteStore.get(id)!)}\n            />,\n          ]\n        : []}\n      <Table<DedupMineralSite>\n        bordered={true}\n        size=\"small\"\n        rowKey=\"id\"\n        columns={columns}\n        dataSource={dedupMineralSites.records}\n        loading={isLoading ? { size: \"large\" } : false}\n        expandable={{\n          expandedRowRender: (site) => {\n            if (editingDedupSite === site.id) {\n              return <EditDedupMineralSite commodity={commodity!} dedupSite={site} />;\n            }\n            return null;\n          },\n          showExpandColumn: false,\n          expandedRowKeys: [...(editingDedupSite ? [editingDedupSite] : [])],\n        }}\n      />\n    </>\n  );\n});\n","import { Flex } from \"antd\";\nimport { observer } from \"mobx-react\";\nimport { SearchBar, useSearchArgs } from \"./SearchBar\";\nimport { DedupMineralSiteTable } from \"./DedupMineralSiteTable\";\n\nexport const HomePage = observer(() => {\n  const [searchArgs, normSearchArgs, setSearchArgs] = useSearchArgs();\n\n  return (\n    <Flex vertical={true} gap=\"small\">\n      <SearchBar searchArgs={searchArgs} setSearchArgs={setSearchArgs} />\n      <DedupMineralSiteTable commodity={normSearchArgs.commodity} />\n    </Flex>\n  );\n});\n","import { Menu } from \"antd\";\nimport { WithStyles, withStyles } from \"@material-ui/styles\";\nimport { useLocation } from \"react-router-dom\";\nimport { getActiveRouteName, PathDef } from \"gena-app\";\nimport React from \"react\";\n\nconst css = {\n  centerNavBar: {\n    justifyContent: \"center\",\n    boxShadow: \"0 2px 8px #f0f1f2\",\n  },\n  leftNavBar: {\n    \"& .logo::after\": {\n      borderBottom: \"none !important\",\n      transition: \"none !important\",\n    },\n    \"& .logo:hover::after\": {\n      borderBottom: \"none !important\",\n      transition: \"none !important\",\n    },\n    \"& .logo img\": {\n      height: 24,\n      borderRadius: 4,\n      marginTop: -2,\n    },\n    paddingLeft: 24,\n    paddingRight: 24,\n    boxShadow: \"0 2px 8px #f0f1f2\",\n  },\n};\n\ntype MenuItemProps = {\n  children: string | JSX.Element;\n  icon?: JSX.Element;\n  danger?: boolean;\n  disabled?: boolean;\n};\n\ninterface Props<R> {\n  menus: Partial<Record<keyof R, string | JSX.Element | MenuItemProps>>;\n  routes: R;\n  className?: string;\n  style?: React.CSSProperties;\n  isFirstItemLogo?: boolean;\n}\ntype Component = <R extends Record<any, PathDef<any, any>>>(_p: Props<R>) => JSX.Element;\n\nexport const CenterNavBar = withStyles(css)(<R extends Record<any, PathDef<any, any>>>({ classes, menus, routes, className, style, isFirstItemLogo }: Props<R> & WithStyles<typeof css>) => {\n  const location = useLocation();\n  const openMenu = (e: { key: keyof R }) => {\n    routes[e.key].path({}, {}).open();\n  };\n\n  const items = Object.keys(menus).map((routeName, index) => {\n    const className = isFirstItemLogo === true && index === 0 ? \"logo\" : \"\";\n    return getMenuItem(routeName, className, menus[routeName]!);\n  });\n  const activeRouteName = getActiveRouteName(location, routes);\n\n  return (\n    <Menu\n      mode=\"horizontal\"\n      className={classes.centerNavBar + (className !== undefined ? \" \" + className : \"\")}\n      style={style}\n      onClick={openMenu}\n      selectedKeys={activeRouteName !== undefined ? [activeRouteName] : undefined}\n    >\n      {items}\n    </Menu>\n  );\n}) as Component;\n\nexport const LeftNavBar = withStyles(css)(<R extends Record<any, PathDef<any, any>>>({ classes, menus, routes, className, style, isFirstItemLogo }: Props<R> & WithStyles<typeof css>) => {\n  const location = useLocation();\n  const openMenu = (e: { key: keyof R }) => {\n    routes[e.key].path({}, {}).open();\n  };\n\n  const items = Object.keys(menus).map((routeName, index) => {\n    const className = isFirstItemLogo === true && index === 0 ? \"logo\" : \"\";\n    return getMenuItem(routeName, className, menus[routeName]!);\n  });\n  const activeRouteName = getActiveRouteName(location, routes);\n\n  return (\n    <Menu\n      mode=\"horizontal\"\n      className={classes.leftNavBar + (className !== undefined ? \" \" + className : \"\")}\n      style={style}\n      onClick={openMenu}\n      selectedKeys={activeRouteName !== undefined ? [activeRouteName] : undefined}\n    >\n      {items}\n    </Menu>\n  );\n}) as Component;\n\nfunction getMenuItem(key: string, className: string, props: string | JSX.Element | MenuItemProps) {\n  let children, realprops;\n\n  if (typeof props === \"string\") {\n    children = props;\n  } else if (React.isValidElement(props)) {\n    children = props;\n  } else {\n    const { children: children2, ...realprops2 } = props as MenuItemProps;\n    children = children2;\n    realprops = realprops2;\n  }\n\n  return (\n    <Menu.Item className={className} key={key} {...realprops}>\n      {children}\n    </Menu.Item>\n  );\n}\n","import { Avatar, Button, Col, List, Row, Typography } from \"antd\";\nimport { observer } from \"mobx-react\";\nimport React, { ReactElement, useEffect } from \"react\";\nimport { InternalLink } from \"gena-app\";\nimport { useStores } from \"../models\";\nimport { routes } from \"../routes\";\n\nexport const RequiredAuthentication = observer(({ children }: { children: ReactElement }) => {\n  const { userStore } = useStores();\n\n  // check & login if not logged in\n  useEffect(() => {\n    userStore.isLoggedIn().then((isLoggedIn) => {\n      if (!isLoggedIn) {\n        routes.login.path().open();\n      }\n    });\n  }, [userStore]);\n\n  return children;\n});\n","import { PathDef, NoArgsPathDef, NoURLArgsPathDef, applyLayout } from \"gena-app\";\nimport { HomePage, LoginPage } from \"./pages\";\n\nimport React, { useEffect } from \"react\";\nimport { LeftNavBar } from \"./components/Navbar\";\nimport { Space } from \"antd\";\n\nimport { RequiredAuthentication } from \"components/RequiredAuthentication\";\nimport { PUBLIC_URL } from \"env\";\n\n/*************************************************************************************\n * Layouts of the application\n */\nexport const Layout = (component: React.FunctionComponent<any> | React.ComponentClass<any, any>) => {\n  return (props: any) => {\n    const element = React.createElement(component, props);\n\n    return (\n      <Space direction=\"vertical\" style={{ width: \"100%\" }}>\n        <LeftNavBar\n          menus={{\n            home: <span>MinMod Editor</span>,\n          }}\n          routes={routes}\n          isFirstItemLogo={true}\n        />\n        <RequiredAuthentication>\n          <div className=\"wide-container\">{element}</div>\n        </RequiredAuthentication>\n      </Space>\n    );\n  };\n};\n\nconst None = () => <h1>Not supposed to see this page</h1>;\n\n/*************************************************************************************\n * Definitions for routes in this application\n */\nexport const routes = {\n  login: new NoArgsPathDef({\n    component: LoginPage,\n    pathDef: `${PUBLIC_URL}/login`,\n    exact: true,\n  }),\n  home: new NoURLArgsPathDef({\n    component: HomePage,\n    pathDef: `${PUBLIC_URL}/`,\n    exact: true,\n    querySchema: {\n      commodity: \"optionalstring\",\n    },\n  }),\n};\n(window as any)._routes = routes;\n\n// apply this layout to all routes except login\napplyLayout(routes, Layout, [\"login\"]);\n","import React, { useEffect, useState } from \"react\";\nimport \"./login.css\";\nimport { routes } from \"routes\";\nimport { useStores } from \"../../models\";\n\nexport const LoginPage = () => {\n  const { userStore } = useStores();\n\n  const [username, setUsername] = useState<string>(\"\");\n  const [password, setPassword] = useState<string>(\"\");\n  const [error, setError] = useState<string>(\"\");\n\n  useEffect(() => {\n    userStore.isLoggedIn().then((isLoggedIn) => {\n      if (isLoggedIn) routes.home.path({ commodity: undefined }).open();\n    });\n  }, [userStore]);\n\n  const handleLogin = async (event: React.FormEvent) => {\n    event.preventDefault();\n    try {\n      await userStore.login(username, password);\n      routes.home.path({ commodity: undefined }).open();\n    } catch (err) {\n      setError(\"An error occurred. Please try again later.\");\n    }\n  };\n\n  return (\n    <div className=\"login-container\">\n      <h2>Login</h2>\n      <form onSubmit={handleLogin} className=\"login-form\">\n        <div className=\"form-group\">\n          <label htmlFor=\"username\">Username:</label>\n          <input type=\"text\" id=\"username\" value={username} onChange={(e) => setUsername(e.target.value)} required />\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"password\">Password:</label>\n          <input type=\"password\" id=\"password\" value={password} onChange={(e) => setPassword(e.target.value)} required />\n        </div>\n        {error && <p className=\"error-message\">{error}</p>}\n        <button type=\"submit\" className=\"login-button\">\n          Login\n        </button>\n      </form>\n    </div>\n  );\n};\n","import { ReactElement, useEffect } from \"react\";\nimport { initNonCriticalStores } from \"models\";\n\nexport const InitNonCriticalStores = ({ children }: { children: ReactElement }) => {\n  useEffect(() => {\n    initNonCriticalStores();\n  }, []);\n\n  return children;\n};\n","import ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { App } from \"gena-app\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { stores, initStores, StoreContext } from \"./models\";\nimport { routes } from \"./routes\";\nimport enUSIntl from \"antd/lib/locale/en_US\";\nimport { ConfigProvider } from \"antd\";\nimport { InitNonCriticalStores } from \"components/StoreInit\";\n\ninitStores().then(() => {\n  ReactDOM.render(\n    <StoreContext.Provider value={stores}>\n      <ConfigProvider locale={enUSIntl}>\n        <InitNonCriticalStores>\n          <App enUSLocale={true} routes={routes} />\n        </InitNonCriticalStores>\n      </ConfigProvider>\n    </StoreContext.Provider>,\n    document.getElementById(\"root\")\n  );\n});\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}